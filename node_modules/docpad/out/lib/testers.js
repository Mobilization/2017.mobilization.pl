// Generated by CoffeeScript 1.9.1
(function() {
  var CSON, DocPad, PluginTester, RendererTester, ServerTester, assert, balUtil, deepEqual, difference, docpadUtil, equal, errorEqual, extendr, joe, pathUtil, pluginPort, ref, safefs, test, testers,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  pathUtil = require('path');

  safefs = require('safefs');

  balUtil = require('bal-util');

  extendr = require('extendr');

  joe = require('joe');

  assert = require('assert');

  ref = require('assert-helpers'), equal = ref.equal, deepEqual = ref.deepEqual, errorEqual = ref.errorEqual;

  CSON = require('cson');

  difference = require('underscore').difference;

  DocPad = require('./docpad');

  docpadUtil = require('./util');

  pluginPort = 2000 + parseInt(String(Date.now()).substr(-6, 4));

  testers = {
    CSON: CSON,
    DocPad: DocPad
  };

  testers.PluginTester = PluginTester = (function() {
    PluginTester.extend = require('csextends');

    PluginTester.prototype.config = {
      testerName: null,
      pluginName: null,
      pluginPath: null,
      testPath: null,
      outExpectedPath: null,
      removeWhitespace: false,
      contentRemoveRegex: null,
      autoExit: 'safe'
    };

    PluginTester.prototype.docpadConfig = {
      global: true,
      port: null,
      logLevel: ((indexOf.call(process.argv, '-d') >= 0) ? 7 : 5),
      rootPath: null,
      outPath: null,
      srcPath: null,
      pluginPaths: null,
      enableUnlistedPlugins: true,
      enabledPlugins: null,
      skipUnsupportedPlugins: false,
      catchExceptions: false,
      environment: null
    };

    PluginTester.prototype.docpad = null;

    function PluginTester(config, docpadConfig, next) {
      var base, base1, base2, base3, base4, base5, base6, base7, base8, defaultEnabledPlugins, tester;
      if (config == null) {
        config = {};
      }
      if (docpadConfig == null) {
        docpadConfig = {};
      }
      this.testEverything = bind(this.testEverything, this);
      this.testGenerate = bind(this.testGenerate, this);
      this.testServer = bind(this.testServer, this);
      this.testLoad = bind(this.testLoad, this);
      this.testCreate = bind(this.testCreate, this);
      tester = this;
      this.config = extendr.deepExtendPlainObjects({}, PluginTester.prototype.config, this.config, config);
      this.docpadConfig = extendr.deepExtendPlainObjects({}, PluginTester.prototype.docpadConfig, this.docpadConfig, docpadConfig);
      if ((base = this.docpadConfig).port == null) {
        base.port = ++pluginPort;
      }
      if ((base1 = this.config).testerName == null) {
        base1.testerName = this.config.pluginName + " plugin";
      }
      (base2 = this.config).testPath || (base2.testPath = pathUtil.join(this.config.pluginPath, 'test'));
      (base3 = this.config).outExpectedPath || (base3.outExpectedPath = pathUtil.join(this.config.testPath, 'out-expected'));
      (base4 = this.docpadConfig).rootPath || (base4.rootPath = this.config.testPath);
      (base5 = this.docpadConfig).outPath || (base5.outPath = pathUtil.join(this.docpadConfig.rootPath, 'out'));
      (base6 = this.docpadConfig).srcPath || (base6.srcPath = pathUtil.join(this.docpadConfig.rootPath, 'src'));
      if ((base7 = this.docpadConfig).pluginPaths == null) {
        base7.pluginPaths = [this.config.pluginPath];
      }
      defaultEnabledPlugins = {};
      defaultEnabledPlugins[this.config.pluginName] = true;
      (base8 = this.docpadConfig).enabledPlugins || (base8.enabledPlugins = defaultEnabledPlugins);
      joe.describe(this.config.testerName, function(suite, task) {
        tester.describe = tester.suite = suite;
        tester.it = tester.test = task;
        tester.done = tester.exit = function(next) {
          var ref1;
          return (ref1 = tester.docpad) != null ? ref1.action('destroy', next) : void 0;
        };
        return typeof next === "function" ? next(null, tester) : void 0;
      });
      this;
    }

    PluginTester.prototype.getConfig = function() {
      return this.config;
    };

    PluginTester.prototype.getPlugin = function() {
      return this.docpad.getPlugin(this.getConfig().pluginName);
    };

    PluginTester.prototype.testCreate = function() {
      var docpadConfig, tester;
      tester = this;
      docpadConfig = this.docpadConfig;
      this.test("create", function(done) {
        return new DocPad(docpadConfig, function(err, docpad) {
          if (err) {
            return done(err);
          }
          tester.docpad = docpad;
          return tester.docpad.action('init', function(err) {
            if (err && err.message !== tester.docpad.getLocale().skeletonExists) {
              return done(err);
            }
            return tester.docpad.action('clean', function(err) {
              if (err) {
                return done(err);
              }
              return tester.docpad.action('install', done);
            });
          });
        });
      });
      return this;
    };

    PluginTester.prototype.testLoad = function() {
      var tester;
      tester = this;
      this.test("load plugin " + tester.config.pluginName, function(done) {
        return tester.docpad.loadedPlugin(tester.config.pluginName, function(err, loaded) {
          if (err) {
            return done(err);
          }
          assert.ok(loaded);
          return done();
        });
      });
      return this;
    };

    PluginTester.prototype.testServer = function(next) {
      var tester;
      tester = this;
      this.test("server", function(done) {
        return tester.docpad.action('server', function(err) {
          return done(err);
        });
      });
      return this;
    };

    PluginTester.prototype.testGenerate = function() {
      var tester;
      tester = this;
      this.test("generate", function(done) {
        return tester.docpad.action('generate', function(err) {
          return done(err);
        });
      });
      return this;
    };

    PluginTester.prototype.testEverything = function() {
      var tester;
      tester = this;
      this.testCreate();
      this.testLoad();
      this.testGenerate();
      this.testServer();
      if (typeof this.testCustom === "function") {
        this.testCustom();
      }
      this.finish();
      return this;
    };

    PluginTester.prototype.finish = function() {
      var tester;
      tester = this;
      if (tester.config.autoExit) {
        this.test('finish up', function(next) {
          return tester.exit(next);
        });
      }
      return this;
    };

    return PluginTester;

  })();

  testers.ServerTester = ServerTester = (function(superClass) {
    extend(ServerTester, superClass);

    function ServerTester() {
      return ServerTester.__super__.constructor.apply(this, arguments);
    }

    return ServerTester;

  })(PluginTester);

  testers.RendererTester = RendererTester = (function(superClass) {
    extend(RendererTester, superClass);

    function RendererTester() {
      return RendererTester.__super__.constructor.apply(this, arguments);
    }

    RendererTester.prototype.testGenerate = function() {
      var tester;
      tester = this;
      this.suite("generate", function(suite, test) {
        test('action', function(done) {
          return tester.docpad.action('generate', function(err) {
            return done(err);
          });
        });
        return suite('results', function(suite, test, done) {
          return balUtil.scanlist(tester.docpadConfig.outPath, function(err, outResults) {
            if (err) {
              return done(err);
            }
            return balUtil.scanlist(tester.config.outExpectedPath, function(err, outExpectedResults) {
              var outExpectedResultsKeys, outResultsKeys;
              if (err) {
                return done(err);
              }
              outResultsKeys = Object.keys(outResults);
              outExpectedResultsKeys = Object.keys(outExpectedResults);
              test('same files', function() {
                var outDifferenceKeys;
                outDifferenceKeys = difference(outExpectedResultsKeys, outResultsKeys);
                deepEqual(outDifferenceKeys, [], 'The following file(s) should have been generated');
                outDifferenceKeys = difference(outResultsKeys, outExpectedResultsKeys);
                return deepEqual(outDifferenceKeys, [], 'The following file(s) should not have been generated');
              });
              outResultsKeys.forEach(function(key) {
                return test("same file content for: " + key, function() {
                  var actual, expected, replaceLinesRegex;
                  actual = outResults[key];
                  expected = outExpectedResults[key];
                  if (tester.config.removeWhitespace === true) {
                    replaceLinesRegex = /\s+/g;
                    actual = actual.replace(replaceLinesRegex, '');
                    expected = expected.replace(replaceLinesRegex, '');
                  }
                  if (tester.config.contentRemoveRegex) {
                    actual = actual.replace(tester.config.contentRemoveRegex, '');
                    expected = expected.replace(tester.config.contentRemoveRegex, '');
                  }
                  return equal(actual, expected);
                });
              });
              return done();
            });
          });
        });
      });
      return this;
    };

    return RendererTester;

  })(PluginTester);

  testers.test = test = function(testerConfig, docpadConfig) {
    var complete;
    if (testerConfig.testerClass == null) {
      testerConfig.testerClass = PluginTester;
    }
    testerConfig.pluginPath = pathUtil.resolve(testerConfig.pluginPath);
    if (testerConfig.pluginName == null) {
      testerConfig.pluginName = pathUtil.basename(testerConfig.pluginPath).replace('docpad-plugin-', '');
    }
    if (testerConfig.testerPath == null) {
      testerConfig.testerPath = pathUtil.join('out', testerConfig.pluginName + ".tester.js");
    }
    if (testerConfig.testerPath) {
      testerConfig.testerPath = pathUtil.resolve(testerConfig.pluginPath, testerConfig.testerPath);
    }
    complete = function() {
      if (typeof testerConfig.testerClass === 'string') {
        testerConfig.testerClass = testers[testerConfig.testerClass];
      }
      return new testerConfig.testerClass(testerConfig, docpadConfig, function(err, testerInstance) {
        if (err) {
          throw err;
        }
        return testerInstance.testEverything();
      });
    };
    if (testerConfig.testerPath) {
      safefs.exists(testerConfig.testerPath, function(exists) {
        if (exists) {
          testerConfig.testerClass = require(testerConfig.testerPath)(testers);
        }
        return complete();
      });
    } else {
      complete();
    }
    return testers;
  };

  module.exports = testers;

}).call(this);
