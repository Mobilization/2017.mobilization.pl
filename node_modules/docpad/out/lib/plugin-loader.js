// Generated by CoffeeScript 1.9.1
(function() {
  var PluginLoader, pathUtil, safefs, semver, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  pathUtil = require('path');

  util = require('util');

  semver = require('semver');

  safefs = require('safefs');

  PluginLoader = (function() {
    PluginLoader.prototype.docpad = null;

    PluginLoader.prototype.BasePlugin = null;

    PluginLoader.prototype.dirPath = null;

    PluginLoader.prototype.packagePath = null;

    PluginLoader.prototype.packageData = {};

    PluginLoader.prototype.pluginPath = null;

    PluginLoader.prototype.pluginClass = {};

    PluginLoader.prototype.pluginName = null;

    PluginLoader.prototype.pluginVersion = null;

    PluginLoader.prototype.nodeModulesPath = null;

    function PluginLoader(arg) {
      var docpad;
      this.docpad = arg.docpad, this.dirPath = arg.dirPath, this.BasePlugin = arg.BasePlugin;
      docpad = this.docpad;
      this.pluginName = pathUtil.basename(this.dirPath).replace(/^docpad-plugin-/, '');
      this.pluginClass = {};
      this.packageData = {};
      this.nodeModulesPath = pathUtil.resolve(this.dirPath, 'node_modules');
    }

    PluginLoader.prototype.exists = function(next) {
      var failure, packagePath, success;
      packagePath = this.packagePath || pathUtil.resolve(this.dirPath, "package.json");
      failure = function(err) {
        if (err == null) {
          err = null;
        }
        return next(err, false);
      };
      success = function() {
        return next(null, true);
      };
      safefs.exists(packagePath, (function(_this) {
        return function(exists) {
          if (!exists) {
            return failure();
          }
          _this.packagePath = packagePath;
          return safefs.readFile(packagePath, function(err, data) {
            var pluginPath, pluginVersion;
            if (err) {
              return failure(err);
            }
            try {
              _this.packageData = JSON.parse(data.toString());
            } catch (_error) {
              err = _error;
              return failure(err);
            } finally {
              if (!_this.packageData) {
                return failure();
              }
            }
            pluginVersion = _this.packageData.version;
            pluginPath = _this.packageData.main && pathUtil.join(_this.dirPath, _this.packageData.main);
            if (!pluginVersion) {
              return failure();
            }
            if (!pluginPath) {
              return failure();
            }
            _this.pluginVersion = pluginVersion;
            _this.pluginPath = pluginPath;
            return success();
          });
        };
      })(this));
      return this;
    };

    PluginLoader.prototype.unsupported = function(next) {
      var docpad, engines, keywords, peerDependencies, platforms, ref, unsupported, version;
      docpad = this.docpad;
      version = this.packageData.version;
      keywords = this.packageData.keywords || [];
      platforms = this.packageData.platforms || [];
      engines = this.packageData.engines || {};
      peerDependencies = this.packageData.peerDependencies || {};
      unsupported = indexOf.call(keywords, 'docpad-plugin') < 0 ? 'type' : version && !semver.satisfies(version, docpad.pluginVersion) ? 'version-plugin' : platforms.length && (ref = process.platform, indexOf.call(platforms, ref) < 0) ? 'platform' : (engines.node != null) && !semver.satisfies(process.version, engines.node) ? 'engine-node' : (engines.docpad != null) && !semver.satisfies(docpad.getVersion(), engines.docpad) ? 'version-docpad' : (peerDependencies.docpad != null) && !semver.satisfies(docpad.getVersion(), peerDependencies.docpad) ? 'version-docpad' : false;
      next(null, unsupported);
      return this;
    };

    PluginLoader.prototype.install = function(next) {
      var docpad;
      docpad = this.docpad;
      if (this.packagePath) {
        docpad.initNodeModules({
          path: this.dirPath,
          next: function(err, results) {
            return next(err);
          }
        });
      } else {
        next();
      }
      return this;
    };

    PluginLoader.prototype.load = function(next) {
      var base, docpad, err, locale, pluginPrototypeName, ref, ref1, ref2, validPluginName;
      docpad = this.docpad;
      locale = docpad.getLocale();
      if (pathUtil.extname(this.pluginPath) === '.coffee') {
        if (!(this.packageData["private"] === true && docpad.getConfig().warnUncompiledPrivatePlugins === false)) {
          docpad.warn(util.format(locale.pluginUncompiled, this.pluginName, ((ref = this.packageData.bugs) != null ? ref.url : void 0) || locale.pluginIssueTracker));
        }
        try {
          require('coffee-script/register');
        } catch (_error) {
          err = _error;
          err.context = util.format(locale.pluginUncompiledFailed, this.pluginName, ((ref1 = this.packageData.bugs) != null ? ref1.url : void 0) || locale.pluginIssueTracker);
          return next(err);
          this;
        }
      }
      try {
        this.pluginClass = require(this.pluginPath)(this.BasePlugin);
      } catch (_error) {
        err = _error;
        err.context = util.format(locale.pluginLoadFailed, this.pluginName, ((ref2 = this.packageData.bugs) != null ? ref2.url : void 0) || locale.pluginIssueTracker);
        return next(err);
        this;
      }
      if ((base = this.pluginClass.prototype).version == null) {
        base.version = this.pluginVersion;
      }
      pluginPrototypeName = this.pluginClass.prototype.name;
      if (/^[a-z0-9]+$/.test(this.pluginName) === false) {
        validPluginName = this.pluginName.replace(/[^a-z0-9]/, '');
        docpad.warn(util.format(locale.pluginNamingConventionInvalid, this.pluginName, validPluginName));
      }
      if (pluginPrototypeName === null) {
        this.pluginClass.prototype.name = this.pluginName;
        docpad.warn(util.format(locale.pluginPrototypeNameUndefined, this.pluginName));
      } else if (pluginPrototypeName !== this.pluginName) {
        docpad.warn(util.format(locale.pluginPrototypeNameDifferent, this.pluginName, pluginPrototypeName));
      }
      next(null, this.pluginClass);
      return this;
    };

    PluginLoader.prototype.create = function(config, next) {
      var docpad, err, pluginInstance;
      try {
        docpad = this.docpad;
        pluginInstance = new this.pluginClass({
          docpad: docpad,
          config: config
        });
      } catch (_error) {
        err = _error;
        return next(err, null);
      }
      return next(null, pluginInstance);
      return this;
    };

    return PluginLoader;

  })();

  module.exports = PluginLoader;

}).call(this);
