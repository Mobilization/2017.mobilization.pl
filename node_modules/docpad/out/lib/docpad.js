// Generated by CoffeeScript 1.9.1
(function() {
  var BasePlugin, CSON, Collection, DocPad, DocumentModel, ElementsCollection, EventEmitterGrouped, Events, FileModel, FilesCollection, MetaCollection, Model, PluginLoader, QueryCollection, ScriptsCollection, StylesCollection, TaskGroup, ambi, balUtil, corePath, docpadUtil, eachr, extendr, extractOptsAndCallback, ignorefs, isUser, lazyRequire, pathUtil, pick, queryEngine, ref, ref1, rimraf, safefs, safeps, scandir, setImmediate, superAgent, typeChecker, union, uniq, util,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  pathUtil = require('path');

  lazyRequire = require('lazy-require');

  corePath = pathUtil.resolve(__dirname, '..', '..');

  if ((indexOf.call(process.argv, '--profile') >= 0)) {
    debugger;
    if (process.env.NODETIME_KEY) {
      console.log('Loading profiling tool: nodetime');
      require('lazy-require').sync('nodetime', {
        cwd: corePath
      }, function(err, nodetime) {
        if (err) {
          console.log('Failed to load profiling tool: nodetime');
          return console.log(err.stack || err);
        } else {
          nodetime.profile({
            accountKey: process.env.NODETIME_KEY,
            appName: 'DocPad'
          });
          return console.log('Profiling with nodetime with account key:', process.env.NODETIME_KEY);
        }
      });
    }
    console.log('Loading profiling tool: webkit-devtools-agent');
    require('lazy-require').sync('webkit-devtools-agent', {
      cwd: corePath
    }, function(err, agent) {
      if (err) {
        console.log('Failed to load profiling tool: webkit-devtools-agent');
        return console.log(err.stack || err);
      } else {
        agent.start();
        return console.log("Profiling with webkit-devtools-agent on pid " + process.pid + " at http://127.0.0.1:9999/");
      }
    });
  }

  util = require('util');

  queryEngine = require('query-engine');

  ref = require('underscore'), uniq = ref.uniq, union = ref.union, pick = ref.pick;

  CSON = require('cson');

  balUtil = require('bal-util');

  scandir = require('scandirectory');

  extendr = require('extendr');

  eachr = require('eachr');

  typeChecker = require('typechecker');

  ambi = require('ambi');

  TaskGroup = require('taskgroup').TaskGroup;

  safefs = require('safefs');

  safeps = require('safeps');

  ignorefs = require('ignorefs');

  rimraf = require('rimraf');

  superAgent = require('superagent');

  extractOptsAndCallback = require('extract-opts');

  EventEmitterGrouped = require('event-emitter-grouped').EventEmitterGrouped;

  ref1 = require('./base'), Events = ref1.Events, Model = ref1.Model, Collection = ref1.Collection, QueryCollection = ref1.QueryCollection;

  docpadUtil = require('./util');

  FileModel = require('./models/file');

  DocumentModel = require('./models/document');

  FilesCollection = require('./collections/files');

  ElementsCollection = require('./collections/elements');

  MetaCollection = require('./collections/meta');

  ScriptsCollection = require('./collections/scripts');

  StylesCollection = require('./collections/styles');

  PluginLoader = require('./plugin-loader');

  BasePlugin = require('./plugin');

  setImmediate = (typeof global !== "undefined" && global !== null ? global.setImmediate : void 0) || process.nextTick;

  isUser = docpadUtil.isUser();

  DocPad = (function(superClass) {
    extend(DocPad, superClass);

    DocPad.create = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    DocPad.createInstance = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){});
    };

    DocPad.require = function(relativePath) {
      var absolutePath;
      absolutePath = pathUtil.normalize(pathUtil.join(__dirname, relativePath));
      if (absolutePath.replace(__dirname, '') === absolutePath) {
        throw new Error("docpad.require is limited to local docpad files only: " + relativePath);
      }
      return require(absolutePath);
    };

    DocPad.prototype.Events = Events;

    DocPad.prototype.Model = Model;

    DocPad.prototype.Collection = Collection;

    DocPad.prototype.QueryCollection = QueryCollection;

    DocPad.prototype.FileModel = FileModel;

    DocPad.prototype.DocumentModel = DocumentModel;

    DocPad.prototype.FilesCollection = FilesCollection;

    DocPad.prototype.ElementsCollection = ElementsCollection;

    DocPad.prototype.MetaCollection = MetaCollection;

    DocPad.prototype.ScriptsCollection = ScriptsCollection;

    DocPad.prototype.StylesCollection = StylesCollection;

    DocPad.prototype.PluginLoader = PluginLoader;

    DocPad.prototype.BasePlugin = BasePlugin;

    DocPad.prototype.version = null;

    DocPad.prototype.getVersion = function() {
      if (this.version == null) {
        this.version = require(this.packagePath).version;
      }
      return this.version;
    };

    DocPad.prototype.getVersionString = function() {
      if (docpadUtil.isLocalDocPadExecutable()) {
        return util.format(this.getLocale().versionLocal, this.getVersion(), this.corePath);
      } else {
        return util.format(this.getLocale().versionGlobal, this.getVersion(), this.corePath);
      }
    };

    DocPad.prototype.pluginVersion = '2';

    DocPad.prototype.getProcessPlatform = function() {
      return process.platform;
    };

    DocPad.prototype.getProcessVersion = function() {
      return process.version.replace(/^v/, '');
    };

    DocPad.prototype.serverExpress = null;

    DocPad.prototype.serverHttp = null;

    DocPad.prototype.getServer = function(both) {
      var serverExpress, serverHttp;
      if (both == null) {
        both = false;
      }
      serverExpress = this.serverExpress, serverHttp = this.serverHttp;
      if (both) {
        return {
          serverExpress: serverExpress,
          serverHttp: serverHttp
        };
      } else {
        return serverExpress;
      }
    };

    DocPad.prototype.setServer = function(servers) {
      if (servers.serverExpress && servers.serverHttp) {
        this.serverExpress = servers.serverExpress;
        this.serverHttp = servers.serverHttp;
      }
      delete this.config.serverHttp;
      delete this.config.serverExpress;
      return delete this.config.server;
    };

    DocPad.prototype.destroyServer = function() {
      var ref2;
      if ((ref2 = this.serverHttp) != null) {
        ref2.close();
      }
      return this.serverHttp = null;
    };

    DocPad.prototype.loggerInstances = null;

    DocPad.prototype.getLogger = function() {
      var ref2;
      return (ref2 = this.loggerInstances) != null ? ref2.logger : void 0;
    };

    DocPad.prototype.getLoggers = function() {
      return this.loggerInstances;
    };

    DocPad.prototype.setLoggers = function(loggers) {
      if (this.loggerInstances) {
        this.warn(this.getLocale().loggersAlreadyDefined);
      } else {
        this.loggerInstances = loggers;
        this.loggerInstances.logger.setConfig({
          dry: true
        });
        this.loggerInstances.console.setConfig({
          dry: false
        }).pipe(process.stdout);
      }
      return loggers;
    };

    DocPad.prototype.destroyLoggers = function() {
      var key, ref2, value;
      if (this.loggerInstances) {
        ref2 = this.loggerInstances;
        for (key in ref2) {
          if (!hasProp.call(ref2, key)) continue;
          value = ref2[key];
          value.end();
        }
      }
      return this;
    };

    DocPad.prototype.actionRunnerInstance = null;

    DocPad.prototype.getActionRunner = function() {
      return this.actionRunnerInstance;
    };

    DocPad.prototype.action = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return docpadUtil.action.apply(this, args);
    };

    DocPad.prototype.errorRunnerInstance = null;

    DocPad.prototype.getErrorRunner = function() {
      return this.errorRunnerInstance;
    };

    DocPad.prototype.trackRunnerInstance = null;

    DocPad.prototype.getTrackRunner = function() {
      return this.trackRunnerInstance;
    };

    DocPad.prototype.events = ['extendTemplateData', 'extendCollections', 'docpadLoaded', 'docpadReady', 'docpadDestroy', 'consoleSetup', 'generateBefore', 'populateCollectionsBefore', 'populateCollections', 'contextualizeBefore', 'contextualizeAfter', 'renderBefore', 'renderCollectionBefore', 'render', 'renderDocument', 'renderCollectionAfter', 'renderAfter', 'writeBefore', 'writeAfter', 'generateAfter', 'generated', 'serverBefore', 'serverExtend', 'serverAfter', 'notify'];

    DocPad.prototype.getEvents = function() {
      return this.events;
    };

    DocPad.prototype.database = null;

    DocPad.prototype.databaseTempCache = null;

    DocPad.prototype.getDatabase = function() {
      return this.database;
    };

    DocPad.prototype.getDatabaseSafe = function() {
      return this.databaseTempCache || this.database;
    };

    DocPad.prototype.destroyDatabase = function() {
      if (this.database != null) {
        this.database.destroy();
        this.database = null;
      }
      if (this.databaseTempCache != null) {
        this.databaseTempCache.destroy();
        this.databaseTempCache = null;
      }
      return this;
    };

    DocPad.prototype.filesByUrl = null;

    DocPad.prototype.filesBySelector = null;

    DocPad.prototype.filesByOutPath = null;

    DocPad.prototype.blocks = null;


    /* {
    		 * A collection of meta elements
    		meta: null  # Elements Collection
    
    		 * A collection of script elements
    		scripts: null  # Scripts Collection
    
    		 * Collection of style elements
    		styles: null  # Styles Collection
    	}
     */

    DocPad.prototype.getBlock = function(name, clone) {
      var block, classname;
      block = this.blocks[name];
      if (clone) {
        classname = name[0].toUpperCase() + name.slice(1) + 'Collection';
        block = new this[classname](block.models);
      }
      return block;
    };

    DocPad.prototype.setBlock = function(name, value) {
      if (this.blocks[name] != null) {
        this.blocks[name].destroy();
        if (value) {
          this.blocks[name] = value;
        } else {
          delete this.blocks[name];
        }
      } else {
        this.blocks[name] = value;
      }
      return this;
    };

    DocPad.prototype.getBlocks = function() {
      return this.blocks;
    };

    DocPad.prototype.setBlocks = function(blocks) {
      var name, value;
      for (name in blocks) {
        if (!hasProp.call(blocks, name)) continue;
        value = blocks[name];
        this.setBlock(name, value);
      }
      return this;
    };

    DocPad.prototype.eachBlock = function(fn) {
      eachr(this.blocks, fn);
      return this;
    };

    DocPad.prototype.destroyBlocks = function() {
      var block, name, ref2;
      if (this.blocks) {
        ref2 = this.blocks;
        for (name in ref2) {
          if (!hasProp.call(ref2, name)) continue;
          block = ref2[name];
          block.destroy();
          this.blocks[name] = null;
        }
      }
      return this;
    };

    DocPad.prototype.collections = null;

    DocPad.prototype.getCollection = function(value) {
      var collection, i, j, len, len1, ref2, ref3;
      if (value) {
        if (typeof value === 'string') {
          if (value === 'database') {
            return this.getDatabase();
          } else {
            ref2 = this.collections;
            for (i = 0, len = ref2.length; i < len; i++) {
              collection = ref2[i];
              if (value === collection.options.name || value === collection.options.key) {
                return collection;
              }
            }
          }
        } else {
          ref3 = this.collections;
          for (j = 0, len1 = ref3.length; j < len1; j++) {
            collection = ref3[j];
            if (value === collection) {
              return collection;
            }
          }
        }
      }
      return null;
    };

    DocPad.prototype.destroyCollection = function(value) {
      if (value) {
        if (typeof value === 'string' && value !== 'database') {
          this.collections = this.collections.filter(function(collection) {
            if (value === collection.options.name || value === collection.options.key) {
              if (collection != null) {
                collection.destroy();
              }
              return false;
            } else {
              return true;
            }
          });
        } else if (value !== this.getDatabase()) {
          this.collections = this.collections.filter(function(collection) {
            if (value === collection) {
              if (collection != null) {
                collection.destroy();
              }
              return false;
            } else {
              return true;
            }
          });
        }
      }
      return null;
    };

    DocPad.prototype.addCollection = function(collection) {
      if (collection && (collection !== this.getDatabase() && collection !== this.getCollection(collection))) {
        this.collections.push(collection);
      }
      return this;
    };

    DocPad.prototype.setCollection = function(name, collection) {
      if (collection) {
        if (name) {
          collection.options.name = name;
          if (this.getCollection(name) !== collection) {
            this.destroyCollection(name);
          }
        }
        return this.addCollection(collection);
      } else {
        return this.destroyCollection(name);
      }
    };

    DocPad.prototype.getCollections = function() {
      return this.collections;
    };

    DocPad.prototype.setCollections = function(collections) {
      var i, len, name, value;
      if (Array.isArray(collections)) {
        for (i = 0, len = collections.length; i < len; i++) {
          value = collections[i];
          this.addCollection(value);
        }
      } else {
        for (name in collections) {
          if (!hasProp.call(collections, name)) continue;
          value = collections[name];
          this.setCollection(name, value);
        }
      }
      return this;
    };

    DocPad.prototype.eachCollection = function(fn) {
      var collection, i, index, len, ref2;
      fn(this.getDatabase(), 'database');
      ref2 = this.collections;
      for (index = i = 0, len = ref2.length; i < len; index = ++i) {
        collection = ref2[index];
        fn(collection, collection.options.name || collection.options.key || index);
      }
      return this;
    };

    DocPad.prototype.destroyCollections = function() {
      var collection, i, len, ref2;
      if (this.collections) {
        ref2 = this.collections;
        for (i = 0, len = ref2.length; i < len; i++) {
          collection = ref2[i];
          collection.destroy();
        }
        this.collections = [];
      }
      return this;
    };

    DocPad.prototype.getFiles = function(query, sorting, paging) {
      var collection, key;
      key = JSON.stringify({
        query: query,
        sorting: sorting,
        paging: paging
      });
      collection = this.getCollection(key);
      if (!collection) {
        collection = this.getDatabase().findAllLive(query, sorting, paging);
        collection.options.key = key;
        this.addCollection(collection);
      }
      return collection;
    };

    DocPad.prototype.getFile = function(query, sorting, paging) {
      var file;
      file = this.getDatabase().findOne(query, sorting, paging);
      return file;
    };

    DocPad.prototype.getFilesAtPath = function(path, sorting, paging) {
      var files, query;
      query = {
        $or: [
          {
            relativePath: {
              $startsWith: path
            }
          }, {
            fullPath: {
              $startsWith: path
            }
          }
        ]
      };
      files = this.getFiles(query, sorting, paging);
      return files;
    };

    DocPad.prototype.getFileAtPath = function(path, sorting, paging) {
      var file;
      file = this.getDatabase().fuzzyFindOne(path, sorting, paging);
      return file;
    };

    DocPad.prototype.getFileByUrl = function(url, opts) {
      var file;
      if (opts == null) {
        opts = {};
      }
      if (opts.collection == null) {
        opts.collection = this.getDatabase();
      }
      file = opts.collection.get(this.filesByUrl[url]);
      return file;
    };

    DocPad.prototype.getFileById = function(id, opts) {
      var file;
      if (opts == null) {
        opts = {};
      }
      if (opts.collection == null) {
        opts.collection = this.getDatabase();
      }
      file = opts.collection.get(id);
      return file;
    };

    DocPad.prototype.getUrlPathname = function(url) {
      return url.replace(/\?.*/, '');
    };

    DocPad.prototype.getFileByRoute = function(url, next) {
      var cleanUrl, database, docpad, file;
      docpad = this;
      if (docpad.generated === false) {
        docpad.once('generated', function() {
          return docpad.getFileByRoute(url, next);
        });
        return this;
      }
      database = docpad.getDatabaseSafe();
      cleanUrl = docpad.getUrlPathname(url);
      file = docpad.getFileByUrl(url, {
        collection: database
      }) || docpad.getFileByUrl(cleanUrl, {
        collection: database
      });
      next(null, file);
      return this;
    };

    DocPad.prototype.getFileBySelector = function(selector, opts) {
      var file;
      if (opts == null) {
        opts = {};
      }
      if (opts.collection == null) {
        opts.collection = this.getDatabase();
      }
      file = opts.collection.get(this.filesBySelector[selector]);
      if (!file) {
        file = opts.collection.fuzzyFindOne(selector);
        if (file) {
          this.filesBySelector[selector] = file.id;
        }
      }
      return file;
    };

    DocPad.prototype.skeletonsCollection = null;

    DocPad.prototype.getSkeletons = function(next) {
      var docpad, locale;
      docpad = this;
      locale = this.getLocale();
      if (this.skeletonsCollection != null) {
        return next(null, this.skeletonsCollection);
      }
      this.skeletonsCollection = new Collection();
      this.skeletonsCollection.comparator = queryEngine.generateComparator({
        position: 1,
        name: 1
      });
      this.getExchange(function(err, exchange) {
        var index;
        if (err) {
          return next(err);
        }
        index = 0;
        if (exchange) {
          eachr(exchange.skeletons, function(skeleton, skeletonKey) {
            if (skeleton.id == null) {
              skeleton.id = skeletonKey;
            }
            if (skeleton.name == null) {
              skeleton.name = skeletonKey;
            }
            if (skeleton.position == null) {
              skeleton.position = index;
            }
            docpad.skeletonsCollection.add(new Model(skeleton));
            return ++index;
          });
        }
        docpad.skeletonsCollection.add(new Model({
          id: 'none',
          name: locale.skeletonNoneName,
          description: locale.skeletonNoneDescription,
          position: index
        }));
        return next(null, docpad.skeletonsCollection);
      });
      return this;
    };

    DocPad.prototype.slowPlugins = null;

    DocPad.prototype.loadedPlugins = null;

    DocPad.prototype.exchange = null;

    DocPad.prototype.corePath = corePath;

    DocPad.prototype.libPath = __dirname;

    DocPad.prototype.mainPath = pathUtil.resolve(__dirname, 'docpad');

    DocPad.prototype.packagePath = pathUtil.resolve(__dirname, '..', '..', 'package.json');

    DocPad.prototype.localePath = pathUtil.resolve(__dirname, '..', '..', 'locale');

    DocPad.prototype.debugLogPath = pathUtil.join(process.cwd(), 'docpad-debug.log');

    DocPad.prototype.userConfigPath = '.docpad.cson';

    DocPad.prototype.initialTemplateData = null;

    DocPad.prototype.pluginsTemplateData = null;

    DocPad.prototype.getTemplateData = function(userTemplateData) {
      var base, base1, base2, docpad, locale, templateData;
      userTemplateData || (userTemplateData = {});
      docpad = this;
      locale = this.getLocale();
      if (this.initialTemplateData == null) {
        this.initialTemplateData = {
          site: {},
          getEnvironment: function() {
            return docpad.getEnvironment();
          },
          getEnvironments: function() {
            return docpad.getEnvironments();
          },
          referencesOthers: function(flag) {
            var document;
            document = this.getDocument();
            document.referencesOthers();
            return null;
          },
          getDocument: function() {
            return this.documentModel;
          },
          getPath: function(path, parentPath) {
            var document;
            document = this.getDocument();
            path = document.getPath(path, parentPath);
            return path;
          },
          getFiles: function(query, sorting, paging) {
            var result;
            this.referencesOthers();
            result = docpad.getFiles(query, sorting, paging);
            return result;
          },
          getFile: function(query, sorting, paging) {
            var result;
            this.referencesOthers();
            result = docpad.getFile(query, sorting, paging);
            return result;
          },
          getFilesAtPath: function(path, sorting, paging) {
            var result;
            this.referencesOthers();
            path = this.getPath(path);
            result = docpad.getFilesAtPath(path, sorting, paging);
            return result;
          },
          getFileAtPath: function(relativePath) {
            var path, result;
            this.referencesOthers();
            path = this.getPath(relativePath);
            result = docpad.getFileAtPath(path);
            return result;
          },
          getFileById: function(id) {
            var result;
            this.referencesOthers();
            result = docpad.getFileById(id);
            return result;
          },
          getDatabase: function() {
            this.referencesOthers();
            return docpad.getDatabase();
          },
          getCollection: function(name) {
            this.referencesOthers();
            return docpad.getCollection(name);
          },
          getBlock: function(name) {
            return docpad.getBlock(name, true);
          },
          include: function(subRelativePath, strict) {
            var err, file;
            if (strict == null) {
              strict = true;
            }
            file = this.getFileAtPath(subRelativePath);
            if (file) {
              if (strict && file.get('rendered') === false) {
                if (docpad.getConfig().renderPasses === 1) {
                  docpad.warn(util.format(locale.renderedEarlyViaInclude, subRelativePath));
                }
                return null;
              }
              return file.getOutContent();
            } else {
              err = new Error(util.format(locale.includeFailed, subRelativePath));
              throw err;
            }
          }
        };
      }
      templateData = extendr.extend({}, this.initialTemplateData, this.pluginsTemplateData, this.getConfig().templateData, userTemplateData);
      (base = templateData.site).url || (base.url = 'http://' + (docpad.getHostname() || 'localhost') + ':' + (docpad.getPort()));
      (base1 = templateData.site).date || (base1.date = new Date());
      (base2 = templateData.site).keywords || (base2.keywords = []);
      if (typeChecker.isString(templateData.site.keywords)) {
        templateData.site.keywords = templateData.site.keywords.split(/,\s*/g);
      }
      return templateData;
    };

    DocPad.prototype.locale = null;

    DocPad.prototype.getLocale = function() {
      var code, codes, config, locales;
      if ((this.locale != null) === false) {
        config = this.getConfig();
        codes = uniq(['en', safeps.getLanguageCode(config.localeCode), safeps.getLanguageCode(safeps.getLocaleCode()), safeps.getLocaleCode(config.localeCode), safeps.getLocaleCode(safeps.getLocaleCode())]);
        locales = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = codes.length; i < len; i++) {
            code = codes[i];
            results.push(this.loadLocale(code));
          }
          return results;
        }).call(this);
        this.locale = extendr.extend.apply(extendr, locales);
      }
      return this.locale;
    };

    DocPad.prototype.loadLocale = function(code) {
      var locale, localeFilename, localePath;
      localeFilename = code + ".cson";
      localePath = pathUtil.join(this.localePath, localeFilename);
      if (!safefs.existsSync(localePath)) {
        return null;
      }
      locale = CSON.parseCSONFile(localePath);
      if (locale instanceof Error) {
        locale.context = "Failed to parse the CSON locale file: " + localePath;
        docpad.error(locale);
        return null;
      }
      return locale;
    };

    DocPad.prototype.getEnvironment = function() {
      var env;
      env = this.getConfig().env || 'development';
      return env;
    };

    DocPad.prototype.getEnvironments = function() {
      var env, envs;
      env = this.getEnvironment();
      envs = env.split(/[, ]+/);
      return envs;
    };

    DocPad.prototype.hashKey = '7>9}$3hP86o,4=@T';

    DocPad.prototype.websitePackageConfig = null;

    DocPad.prototype.config = null;

    DocPad.prototype.instanceConfig = null;

    DocPad.prototype.websiteConfig = null;

    DocPad.prototype.userConfig = {
      name: null,
      email: null,
      username: null,
      subscribed: null,
      subscribeTryAgain: null,
      tos: null,
      identified: null
    };

    DocPad.prototype.initialConfig = {
      force: false,
      global: false,
      enableUnlistedPlugins: true,
      enabledPlugins: {},
      skipUnsupportedPlugins: true,
      warnUncompiledPrivatePlugins: true,
      plugins: {},
      rootPath: process.cwd(),
      databaseCachePath: '.docpad.db',
      packagePath: 'package.json',
      configPaths: ['docpad.js', 'docpad.coffee', 'docpad.json', 'docpad.cson'],
      pluginPaths: [],
      pluginsPaths: ['node_modules', 'plugins'],
      reloadPaths: [],
      regeneratePaths: [],
      regenerateDelay: 100,
      slowFilesDelay: 20 * 1000,
      outPath: 'out',
      srcPath: 'src',
      documentsPaths: ['documents', 'render'],
      filesPaths: ['files', 'static', 'public'],
      layoutsPaths: ['layouts'],
      ignorePaths: false,
      ignoreHiddenFiles: false,
      ignoreCommonPatterns: true,
      ignoreCustomPatterns: false,
      watchOptions: null,
      port: null,
      hostname: null,
      maxAge: 86400000,
      serverExpress: null,
      serverHttp: null,
      extendServer: true,
      middlewareStandard: true,
      middlewareBodyParser: true,
      middlewareMethodOverride: true,
      middlewareExpressRouter: true,
      middleware404: true,
      middleware500: true,
      logLevel: ((indexOf.call(process.argv, '-d') >= 0) ? 7 : 6),
      catchExceptions: true,
      reportErrors: process.argv.join('').indexOf('test') === -1,
      reportStatistics: process.argv.join('').indexOf('test') === -1,
      color: null,
      databaseCache: false,
      detectEncoding: false,
      renderSingleExtensions: false,
      renderPasses: 1,
      offline: false,
      checkVersion: false,
      welcome: false,
      prompts: false,
      progress: true,
      poweredByDocPad: true,
      helperUrl: true ? 'http://helper.docpad.org/' : 'http://localhost:8000/',
      safeMode: false,
      templateData: {},
      collections: {},
      events: {},
      regenerateEvery: false,
      regenerateEveryOptions: {
        populate: true,
        partial: false
      },
      localeCode: null,
      env: null,
      environments: {
        development: {
          maxAge: false,
          checkVersion: isUser,
          welcome: isUser,
          prompts: isUser
        }
      }
    };

    DocPad.prototype.regenerateTimer = null;

    DocPad.prototype.getConfig = function() {
      return this.config || {};
    };

    DocPad.prototype.getPort = function() {
      var ref2, ref3, ref4, ref5;
      return (ref2 = (ref3 = (ref4 = (ref5 = this.getConfig().port) != null ? ref5 : process.env.PORT) != null ? ref4 : process.env.VCAP_APP_PORT) != null ? ref3 : process.env.VMC_APP_PORT) != null ? ref2 : 9778;
    };

    DocPad.prototype.getHostname = function() {
      var ref2, ref3;
      return (ref2 = (ref3 = this.getConfig().hostname) != null ? ref3 : process.env.HOSTNAME) != null ? ref2 : null;
    };

    function DocPad(instanceConfig, next) {
      var action, configEventContext, docpad, i, len, logger, loggerConsole, loggers, methodName, ref2, ref3, ref4;
      ref2 = extractOptsAndCallback(instanceConfig, next), instanceConfig = ref2[0], next = ref2[1];
      docpad = this;
      this.TaskGroup = (function(superClass1) {
        extend(_Class, superClass1);

        function _Class() {
          var tasks;
          _Class.__super__.constructor.apply(this, arguments);
          tasks = this;
          tasks.on('started', function() {
            var config, name, progress, totals;
            config = tasks.getConfig();
            name = tasks.getNames();
            progress = config.progress;
            if (progress) {
              totals = tasks.getItemTotals();
              return progress.step(name).total(totals.total).setTick(totals.completed);
            } else {
              return docpad.log('debug', name + ' > started');
            }
          });
          tasks.on('item.add', function(item) {
            var config, name, progress, totals;
            config = tasks.getConfig();
            name = item.getNames();
            progress = config.progress;
            if (progress) {
              totals = tasks.getItemTotals();
              return progress.step(name).total(totals.total).setTick(totals.completed);
            } else {
              return docpad.log('debug', name + ' > added');
            }
          });
          tasks.on('item.started', function(item) {
            var config, name, progress, totals;
            config = tasks.getConfig();
            name = item.getNames();
            progress = config.progress;
            if (progress) {
              totals = tasks.getItemTotals();
              return progress.step(name).total(totals.total).setTick(totals.completed);
            } else {
              return docpad.log('debug', name + ' > started');
            }
          });
          tasks.on('item.done', function(item, err) {
            var config, name, progress, totals;
            config = tasks.getConfig();
            name = item.getNames();
            progress = config.progress;
            if (progress) {
              totals = tasks.getItemTotals();
              return progress.step(name).total(totals.total).setTick(totals.completed);
            } else {
              return docpad.log('debug', name + ' > done');
            }
          });
          this;
        }

        return _Class;

      })(TaskGroup);
      ref3 = "action\nlog warn error fatal inspector notify track identify subscribe checkRequest\nserverMiddlewareRouter serverMiddlewareHeader serverMiddleware404 serverMiddleware500\ndestroyWatchers".split(/\s+/);
      for (i = 0, len = ref3.length; i < len; i++) {
        methodName = ref3[i];
        this[methodName] = this[methodName].bind(this);
      }
      this.setMaxListeners(0);
      configEventContext = {
        docpad: docpad
      };
      this.getEvents().forEach(function(eventName) {
        return docpad.on(eventName, function(opts, next) {
          var args, eventHandler, ref4;
          eventHandler = (ref4 = docpad.getConfig().events) != null ? ref4[eventName] : void 0;
          if (typeChecker.isFunction(eventHandler)) {
            args = [opts, next];
            return ambi.apply(null, [eventHandler.bind(configEventContext)].concat(slice.call(args)));
          } else {
            return next();
          }
        });
      });
      this.actionRunnerInstance = this.TaskGroup.create('action runner').whenDone(function(err) {
        if (err) {
          return docpad.error(err);
        }
      });
      this.trackRunnerInstance = this.TaskGroup.create('track runner').whenDone(function(err) {
        var locale;
        if (err && docpad.getDebugging()) {
          locale = docpad.getLocale();
          return docpad.warn(locale.trackError, err);
        }
      });
      if ((loggers = instanceConfig.loggers)) {
        delete instanceConfig.loggers;
      } else {
        logger = new (require('caterpillar').Logger)({
          lineOffset: 2
        });
        loggerConsole = logger.pipe(new (require('caterpillar-filter').Filter)).pipe(new (require('caterpillar-human').Human));
        loggers = {
          logger: logger,
          console: loggerConsole
        };
      }
      safefs.unlink(this.debugLogPath, function() {});
      this.setLoggers(loggers);
      this.setLogLevel((ref4 = instanceConfig.logLevel) != null ? ref4 : this.initialConfig.logLevel);
      this.on('log', function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return docpad.log.apply(this, args);
      });
      this.slowPlugins = {};
      this.loadedPlugins = {};
      this.exchange = {};
      this.pluginsTemplateData = {};
      this.instanceConfig = {};
      this.collections = [];
      this.blocks = {};
      this.filesByUrl = {};
      this.filesBySelector = {};
      this.filesByOutPath = {};
      this.database = new FilesCollection(null, {
        name: 'database'
      }).on('remove', function(model, options) {
        var j, len1, outPath, ref5, updatedModels, url;
        if (model.get('write') === false) {
          return;
        }
        ref5 = model.get('urls') || [];
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          url = ref5[j];
          delete docpad.filesByUrl[url];
        }
        outPath = model.get('outPath');
        if (outPath) {
          updatedModels = docpad.database.findAll({
            outPath: outPath
          });
          updatedModels.remove(model);
          updatedModels.each(function(model) {
            return model.set({
              'mtime': new Date()
            });
          });
          docpad.log('debug', 'Updated mtime for these models due to remove of a similar one', updatedModels.pluck('relativePath'));
        }
        return true;
      }).on('add change:urls', function(model) {
        var j, k, len1, len2, ref5, ref6, url;
        if (model.get('write') === false) {
          return;
        }
        ref5 = model.previous('urls') || [];
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          url = ref5[j];
          delete docpad.filesByUrl[url];
        }
        ref6 = model.get('urls');
        for (k = 0, len2 = ref6.length; k < len2; k++) {
          url = ref6[k];
          docpad.filesByUrl[url] = model.cid;
        }
        return true;
      }).on('add change:outPath', function(model) {
        var base, existingModel, existingModelId, existingModelPath, modelPath, outPath, previousModelId, previousModels, previousOutPath;
        if (model.get('write') === false) {
          return;
        }
        previousOutPath = model.previous('outPath');
        if (previousOutPath) {
          previousModels = docpad.database.findAll({
            outPath: previousOutPath
          });
          previousModels.remove(model);
          previousModels.each(function(model) {
            return model.set({
              'mtime': new Date()
            });
          });
          docpad.log('debug', 'Updated mtime for these models due to addition of a similar one', previousModels.pluck('relativePath'));
          previousModelId = docpad.filesByOutPath[previousOutPath];
          if (previousModelId === model.id) {
            if (previousModels.length) {
              docpad.filesByOutPath[previousOutPath] = previousModelId;
            } else {
              delete docpad.filesByOutPath[previousOutPath];
            }
          }
        }
        if ((outPath = model.get('outPath'))) {
          existingModelId = (base = docpad.filesByOutPath)[outPath] != null ? base[outPath] : base[outPath] = model.id;
          if (existingModelId !== model.id) {
            existingModel = docpad.database.get(existingModelId);
            if (existingModel) {
              modelPath = model.get('fullPath') || (model.get('relativePath') + ':' + model.id);
              existingModelPath = existingModel.get('fullPath') || (existingModel.get('relativePath') + ':' + existingModel.id);
              docpad.warn(util.format(docpad.getLocale().outPathConflict, outPath, modelPath, existingModelPath));
            } else {
              docpad.filesByOutPath[outPath] = model.id;
            }
          }
        }
        return true;
      });
      this.userConfig = extendr.dereference(this.userConfig);
      this.initialConfig = extendr.dereference(this.initialConfig);
      if (instanceConfig.action != null) {
        action = instanceConfig.action;
      } else {
        action = 'load ready';
      }
      if (action) {
        this.action(action, instanceConfig, function(err) {
          if (next != null) {
            return next(err, docpad);
          } else if (err) {
            return docpad.fatal(err);
          }
        });
      } else {
        if (typeof next === "function") {
          next(null, docpad);
        }
      }
      this;
    }

    DocPad.prototype.destroy = function(opts, next) {
      var docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      docpad.destroyRegenerateTimer();
      docpadUtil.wait(1000, function() {
        return docpad.emitSerial('docpadDestroy', function(err) {
          if (err) {
            return typeof next === "function" ? next(err) : void 0;
          }
          docpad.destroyPlugins();
          docpad.destroyServer();
          docpad.destroyWatchers();
          docpad.destroyBlocks();
          docpad.destroyCollections();
          docpad.destroyDatabase();
          docpad.destroyLoggers();
          process.removeListener('uncaughtException', docpad.error);
          docpad.removeAllListeners();
          return typeof next === "function" ? next() : void 0;
        });
      });
      return this;
    };

    DocPad.prototype.emitSerial = function(eventName, opts, next) {
      var docpad, locale, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      locale = docpad.getLocale();
      docpad.log('debug', util.format(locale.emittingEvent, eventName));
      DocPad.__super__.emitSerial.call(this, eventName, opts, function(err) {
        if (err) {
          return next(err);
        }
        docpad.log('debug', util.format(locale.emittedEvent, eventName));
        return next(err);
      });
      return this;
    };

    DocPad.prototype.emitParallel = function(eventName, opts, next) {
      var docpad, locale, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      locale = docpad.getLocale();
      docpad.log('debug', util.format(locale.emittingEvent, eventName));
      DocPad.__super__.emitParallel.call(this, eventName, opts, function(err) {
        if (err) {
          return next(err);
        }
        docpad.log('debug', util.format(locale.emittedEvent, eventName));
        return next(err);
      });
      return this;
    };

    DocPad.prototype.getIgnoreOpts = function() {
      return pick(this.config, ['ignorePaths', 'ignoreHiddenFiles', 'ignoreCommonPatterns', 'ignoreCustomPatterns']);
    };

    DocPad.prototype.isIgnoredPath = function(path, opts) {
      if (opts == null) {
        opts = {};
      }
      opts = extendr.extend(this.getIgnoreOpts(), opts);
      return ignorefs.isIgnoredPath(path, opts);
    };

    DocPad.prototype.scandir = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts = extendr.extend(this.getIgnoreOpts(), opts);
      return scandir(opts);
    };

    DocPad.prototype.watchdir = function(opts) {
      if (opts == null) {
        opts = {};
      }
      opts = extendr.extend(this.getIgnoreOpts(), opts, this.config.watchOptions);
      return require('watchr').watch(opts);
    };

    DocPad.prototype.ready = function(opts, next) {
      var config, docpad, instanceConfig, locale, pluginName, pluginsList, ref2, tasks;
      ref2 = extractOptsAndCallback(instanceConfig, next), instanceConfig = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      this.DocumentModel.prototype.defaults.renderSingleExtensions = config.renderSingleExtensions;
      this.compareVersion();
      if (this.getDebugging()) {
        pluginsList = ((function() {
          var i, len, ref3, results;
          ref3 = Object.keys(this.loadedPlugins).sort();
          results = [];
          for (i = 0, len = ref3.length; i < len; i++) {
            pluginName = ref3[i];
            results.push(pluginName + " v" + this.loadedPlugins[pluginName].version);
          }
          return results;
        }).call(this)).join(', ');
      } else {
        pluginsList = Object.keys(this.loadedPlugins).sort().join(', ');
      }
      docpad.log('info', util.format(locale.welcome, this.getVersionString()));
      docpad.log('notice', locale.welcomeDonate);
      docpad.log('info', locale.welcomeContribute);
      docpad.log('info', util.format(locale.welcomePlugins, pluginsList));
      docpad.log('info', util.format(locale.welcomeEnvironment, this.getEnvironment()));
      tasks = new this.TaskGroup('ready tasks', {
        next: function(err) {
          if (err) {
            return docpad.error(err);
          }
          return typeof next === "function" ? next(null, docpad) : void 0;
        }
      });
      tasks.addTask('welcome event', function(complete) {
        if (!config.welcome) {
          return complete();
        }
        return docpad.emitSerial('welcome', {
          docpad: docpad
        }, complete);
      });
      tasks.addTask('track', function(complete) {
        return docpad.identify(complete);
      });
      tasks.addTask('emit docpadReady', function(complete) {
        return docpad.emitSerial('docpadReady', {
          docpad: docpad
        }, complete);
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.mergeConfigurations = function(configPackages, configsToMerge) {
      var configPackage, env, envConfig, envs, i, j, len, len1, ref2;
      envs = this.getEnvironments();
      for (i = 0, len = configPackages.length; i < len; i++) {
        configPackage = configPackages[i];
        if (!configPackage) {
          continue;
        }
        configsToMerge.push(configPackage);
        for (j = 0, len1 = envs.length; j < len1; j++) {
          env = envs[j];
          envConfig = (ref2 = configPackage.environments) != null ? ref2[env] : void 0;
          if (envConfig) {
            configsToMerge.push(envConfig);
          }
        }
      }
      extendr.safeDeepExtendPlainObjects.apply(extendr, configsToMerge);
      return this;
    };

    DocPad.prototype.setInstanceConfig = function(instanceConfig) {
      var logLevel;
      if (instanceConfig) {
        logLevel = this.getLogLevel();
        extendr.safeDeepExtendPlainObjects(this.instanceConfig, instanceConfig);
        if (this.config) {
          extendr.safeDeepExtendPlainObjects(this.config, instanceConfig);
        }
        if (instanceConfig.logLevel && instanceConfig.logLevel !== logLevel) {
          this.setLogLevel(instanceConfig.logLevel);
        }
      }
      return this;
    };

    DocPad.prototype.setConfig = function(instanceConfig, next) {
      var configPackages, configsToMerge, docpad, i, j, k, key, l, len, len1, len2, len3, locale, postTasks, ref2, ref3, ref4, type, typePath, typePaths;
      ref2 = extractOptsAndCallback(instanceConfig, next), instanceConfig = ref2[0], next = ref2[1];
      docpad = this;
      locale = this.getLocale();
      if (instanceConfig) {
        this.setInstanceConfig(instanceConfig);
      }
      this.config.env = this.instanceConfig.env || this.websiteConfig.env || this.initialConfig.env || process.env.NODE_ENV;
      configPackages = [this.initialConfig, this.userConfig, this.websiteConfig, this.instanceConfig];
      configsToMerge = [this.config];
      docpad.mergeConfigurations(configPackages, configsToMerge);
      this.setServer(extendr.safeShallowExtendPlainObjects({
        serverHttp: this.config.serverHttp,
        serverExpress: this.config.serverExpress
      }, this.config.server));
      this.setLogLevel(this.config.logLevel);
      this.config.rootPath = pathUtil.resolve(this.config.rootPath);
      this.config.outPath = pathUtil.resolve(this.config.rootPath, this.config.outPath);
      this.config.srcPath = pathUtil.resolve(this.config.rootPath, this.config.srcPath);
      this.config.databaseCachePath = pathUtil.resolve(this.config.rootPath, this.config.databaseCachePath);
      this.config.packagePath = pathUtil.resolve(this.config.rootPath, this.config.packagePath);
      ref3 = ['documents', 'files', 'layouts'];
      for (i = 0, len = ref3.length; i < len; i++) {
        type = ref3[i];
        typePaths = this.config[type + 'Paths'];
        for (key = j = 0, len1 = typePaths.length; j < len1; key = ++j) {
          typePath = typePaths[key];
          typePaths[key] = pathUtil.resolve(this.config.srcPath, typePath);
        }
      }
      ref4 = ['plugins'];
      for (k = 0, len2 = ref4.length; k < len2; k++) {
        type = ref4[k];
        typePaths = this.config[type + 'Paths'];
        for (key = l = 0, len3 = typePaths.length; l < len3; key = ++l) {
          typePath = typePaths[key];
          typePaths[key] = pathUtil.resolve(this.config.rootPath, typePath);
        }
      }
      process.removeListener('uncaughtException', this.error);
      this.removeListener('error', this.error);
      if (this.config.catchExceptions) {
        process.setMaxListeners(0);
        process.on('uncaughtException', this.error);
        this.on('error', this.error);
      }
      postTasks = new this.TaskGroup('setConfig post tasks', {
        next: function(err) {
          return next(err, docpad.config);
        }

        /*
        		postTasks.addTask 'lazy depedencnies: encoding', (complete) =>
        			return complete()  unless @config.detectEncoding
        			return lazyRequire 'encoding', {cwd:corePath, stdio:'inherit'}, (err) ->
        				docpad.warn(locale.encodingLoadFailed)  if err
        				return complete()
         */
      });
      postTasks.addTask('load plugins', function(complete) {
        return docpad.loadPlugins(complete);
      });
      postTasks.addTask('extend collections', function(complete) {
        return docpad.extendCollections(complete);
      });
      postTasks.addTask('fetch plugins templateData', function(complete) {
        return docpad.emitSerial('extendTemplateData', {
          templateData: docpad.pluginsTemplateData
        }, complete);
      });
      postTasks.addTask('fire the docpadLoaded event', function(complete) {
        return docpad.emitSerial('docpadLoaded', complete);
      });
      postTasks.run();
      return this;
    };

    DocPad.prototype.load = function(instanceConfig, next) {
      var docpad, locale, preTasks, ref2;
      ref2 = extractOptsAndCallback(instanceConfig, next), instanceConfig = ref2[0], next = ref2[1];
      docpad = this;
      locale = this.getLocale();
      instanceConfig || (instanceConfig = {});
      this.websitePackageConfig = {};
      this.websiteConfig = {};
      this.config = {};
      this.setInstanceConfig(instanceConfig);
      preTasks = new this.TaskGroup('load tasks', {
        next: (function(_this) {
          return function(err) {
            if (err) {
              return next(err);
            }
            return _this.setConfig(next);
          };
        })(this)
      });
      preTasks.addTask('normalize the userConfigPath', (function(_this) {
        return function(complete) {
          return safeps.getHomePath(function(err, homePath) {
            var dropboxPath;
            if (err) {
              return complete(err);
            }
            dropboxPath = pathUtil.resolve(homePath, 'Dropbox');
            return safefs.exists(dropboxPath, function(dropboxPathExists) {
              var userConfigDirPath;
              userConfigDirPath = dropboxPathExists ? dropboxPath : homePath;
              _this.userConfigPath = pathUtil.resolve(userConfigDirPath, _this.userConfigPath);
              return complete();
            });
          });
        };
      })(this));
      preTasks.addTask("load the user's configuration", (function(_this) {
        return function(complete) {
          var configPath;
          configPath = _this.userConfigPath;
          docpad.log('debug', util.format(locale.loadingUserConfig, configPath));
          return _this.loadConfigPath({
            configPath: configPath
          }, function(err, data) {
            if (err) {
              return complete(err);
            }
            extendr.extend(_this.userConfig, data || {});
            docpad.log('debug', util.format(locale.loadingUserConfig, configPath));
            return complete();
          });
        };
      })(this));
      preTasks.addTask("load the anonymous user's configuration", (function(_this) {
        return function(complete) {
          if (_this.userConfig.username) {
            return complete();
          }
          return require('getmac').getMac(function(err, macAddress) {
            var base, base1, macAddressHash;
            if (err || !macAddress) {
              docpad.warn(locale.macError, err);
              return complete();
            }
            try {
              macAddressHash = require('crypto').createHmac('sha1', docpad.hashKey).update(macAddress).digest('hex');
            } catch (_error) {
              err = _error;
              if (err) {
                return complete();
              }
            }
            if (macAddressHash) {
              if ((base = _this.userConfig).name == null) {
                base.name = "MAC " + macAddressHash;
              }
              if ((base1 = _this.userConfig).username == null) {
                base1.username = macAddressHash;
              }
            }
            return complete();
          });
        };
      })(this));
      preTasks.addTask("load the website's package data", (function(_this) {
        return function(complete) {
          var configPath, rootPath;
          rootPath = pathUtil.resolve(_this.instanceConfig.rootPath || _this.initialConfig.rootPath);
          configPath = pathUtil.resolve(rootPath, _this.instanceConfig.packagePath || _this.initialConfig.packagePath);
          docpad.log('debug', util.format(locale.loadingWebsitePackageConfig, configPath));
          return _this.loadConfigPath({
            configPath: configPath
          }, function(err, data) {
            if (err) {
              return complete(err);
            }
            data || (data = {});
            _this.websitePackageConfig = data;
            docpad.log('debug', util.format(locale.loadedWebsitePackageConfig, configPath));
            return complete();
          });
        };
      })(this));
      preTasks.addTask("read the .env file if it exists", (function(_this) {
        return function(complete) {
          var configPath, rootPath;
          rootPath = pathUtil.resolve(_this.instanceConfig.rootPath || _this.websitePackageConfig.rootPath || _this.initialConfig.rootPath);
          configPath = pathUtil.resolve(rootPath, '.env');
          docpad.log('debug', util.format(locale.loadingEnvConfig, configPath));
          return safefs.exists(configPath, function(exists) {
            if (!exists) {
              return complete();
            }
            return require('envfile').parseFile(configPath, function(err, data) {
              var key, value;
              if (err) {
                return complete(err);
              }
              for (key in data) {
                if (!hasProp.call(data, key)) continue;
                value = data[key];
                process.env[key] = value;
              }
              docpad.log('debug', util.format(locale.loadingEnvConfig, configPath));
              return complete();
            });
          });
        };
      })(this));
      preTasks.addTask("load the website's configuration", (function(_this) {
        return function(complete) {
          var configPath, configPaths, i, index, len, rootPath;
          docpad.log('debug', util.format(locale.loadingWebsiteConfig));
          rootPath = pathUtil.resolve(_this.instanceConfig.rootPath || _this.initialConfig.rootPath);
          configPaths = _this.instanceConfig.configPaths || _this.initialConfig.configPaths;
          for (index = i = 0, len = configPaths.length; i < len; index = ++i) {
            configPath = configPaths[index];
            configPaths[index] = pathUtil.resolve(rootPath, configPath);
          }
          return _this.loadConfigPath({
            configPaths: configPaths
          }, function(err, data) {
            if (err) {
              return complete(err);
            }
            data || (data = {});
            extendr.extend(_this.websiteConfig, data);
            docpad.log('debug', util.format(locale.loadedWebsiteConfig));
            return complete();
          });
        };
      })(this));
      preTasks.run();
      return this;
    };

    DocPad.prototype.updateUserConfig = function(data, next) {
      var docpad, ref2, userConfigPath;
      if (data == null) {
        data = {};
      }
      ref2 = extractOptsAndCallback(data, next), data = ref2[0], next = ref2[1];
      docpad = this;
      userConfigPath = this.userConfigPath;
      if (data) {
        extendr.extend(this.userConfig, data);
      }
      CSON.createCSONString(this.userConfig, function(err, userConfigString) {
        if (err) {
          err.context = "Failed to create the CSON string for the user configuration";
          return next(err);
        }
        return safefs.writeFile(userConfigPath, userConfigString, 'utf8', function(err) {
          return next(err);
        });
      });
      return this;
    };

    DocPad.prototype.loadConfigUrl = function(configUrl, next) {
      var docpad, locale;
      docpad = this;
      locale = this.getLocale();
      docpad.log('debug', util.format(locale.loadingConfigUrl, configUrl));
      superAgent.get(configUrl).timeout(30 * 1000).end(function(err, res) {
        if (err) {
          return next(err);
        }
        return CSON.parseCSONString(res.text, next);
      });
      return this;
    };

    DocPad.prototype.loadConfigPath = function(opts, next) {
      var docpad, load, locale, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      locale = this.getLocale();
      load = function(configPath) {
        if (!configPath) {
          return next();
        }
        docpad.log('debug', util.format(locale.loadingConfigPath, configPath));
        return safefs.exists(configPath, function(exists) {
          var csonOptions;
          if (!exists) {
            return next();
          }
          csonOptions = {
            cson: true,
            json: true,
            coffeescript: true,
            javascript: true
          };
          return CSON.requireFile(configPath, csonOptions, function(err, data) {
            if (err) {
              err.context = util.format(locale.loadingConfigPathFailed, configPath);
              return next(err);
            }
            while (typeChecker.isFunction(data)) {
              try {
                data = data(docpad);
              } catch (_error) {
                err = _error;
                return next(err);
              }
            }
            if (!typeChecker.isObject(data)) {
              err = new Error("Loading the configuration " + (docpad.inspector(configPath)) + " returned an invalid result " + (docpad.inspector(data)));
              if (err) {
                return next(err);
              }
            }
            return next(null, data);
          });
        });
      };
      if (opts.configPath) {
        load(opts.configPath);
      } else {
        this.getConfigPath(opts, function(err, configPath) {
          return load(configPath);
        });
      }
      return this;
    };

    DocPad.prototype.getConfigPath = function(opts, next) {
      var config, docpad, ref2, result, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      result = null;
      if (opts.configPaths == null) {
        opts.configPaths = config.configPaths;
      }
      if (!typeChecker.isArray(opts.configPaths)) {
        opts.configPaths = [opts.configPaths];
      }
      tasks = new this.TaskGroup('getConfigPath tasks', {
        next: function(err) {
          return next(err, result);
        }
      });
      opts.configPaths.forEach(function(configPath) {
        return tasks.addTask("Checking if [" + configPath + "] exists", function(complete) {
          if (result) {
            return complete();
          }
          return safefs.exists(configPath, function(exists) {
            if (exists) {
              result = configPath;
              tasks.clear();
              return complete();
            } else {
              return complete();
            }
          });
        });
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.extendCollections = function(next) {
      var database, docpad, docpadConfig, locale, tasks;
      docpad = this;
      docpadConfig = this.getConfig();
      locale = this.getLocale();
      database = this.getDatabase();
      this.setCollections({
        documents: database.createLiveChildCollection().setQuery('isDocument', {
          render: true,
          write: true
        }).on('add', function(model) {
          return docpad.log('debug', util.format(locale.addingDocument, model.getFilePath()));
        }),
        files: database.createLiveChildCollection().setQuery('isFile', {
          render: false,
          write: true
        }).on('add', function(model) {
          return docpad.log('debug', util.format(locale.addingFile, model.getFilePath()));
        }),
        layouts: database.createLiveChildCollection().setQuery('isLayout', {
          $or: {
            isLayout: true,
            fullPath: {
              $startsWith: docpadConfig.layoutsPaths
            }
          }
        }).on('add', function(model) {
          docpad.log('debug', util.format(locale.addingLayout, model.getFilePath()));
          return model.setDefaults({
            isLayout: true,
            render: false,
            write: false
          });
        }),
        generate: database.createLiveChildCollection().setQuery('generate', {
          dynamic: false,
          ignored: false
        }).on('add', function(model) {
          return docpad.log('debug', util.format(locale.addingGenerate, model.getFilePath()));
        }),
        referencesOthers: database.createLiveChildCollection().setQuery('referencesOthers', {
          dynamic: false,
          ignored: false,
          referencesOthers: true
        }).on('add', function(model) {
          return docpad.log('debug', util.format(locale.addingReferencesOthers, model.getFilePath()));
        }),
        hasLayout: database.createLiveChildCollection().setQuery('hasLayout', {
          dynamic: false,
          ignored: false,
          layout: {
            $exists: true
          }
        }).on('add', function(model) {
          return docpad.log('debug', util.format(locale.addingHasLayout, model.getFilePath()));
        }),
        html: database.createLiveChildCollection().setQuery('isHTML', {
          write: true,
          outExtension: 'html'
        }).on('add', function(model) {
          return docpad.log('debug', util.format(locale.addingHtml, model.getFilePath()));
        }),
        stylesheet: database.createLiveChildCollection().setQuery('isStylesheet', {
          write: true,
          outExtension: 'css'
        })
      });
      this.setBlocks({
        meta: new MetaCollection(),
        scripts: new ScriptsCollection(),
        styles: new StylesCollection()
      });
      tasks = new this.TaskGroup("extendCollections tasks", {
        concurrency: 0,
        next: function(err) {
          if (err) {
            docpad.error(err);
          }
          return docpad.emitSerial('extendCollections', next);
        }
      });
      eachr(docpadConfig.collections || {}, function(fn, name) {
        var err;
        if (!name || !typeChecker.isString(name)) {
          err = new Error("Inside your DocPad configuration you have a custom collection with an invalid name of: " + (docpad.inspector(name)));
          docpad.error(err);
          return;
        }
        if (!fn || !typeChecker.isFunction(fn)) {
          err = new Error("Inside your DocPad configuration you have a custom collection called " + (docpad.inspector(name)) + " with an invalid method of: " + (docpad.inspector(fn)));
          docpad.error(err);
          return;
        }
        return tasks.addTask("creating the custom collection: " + name, function(complete) {
          return ambi([fn.bind(docpad), fn], database, function(err, collection) {
            if (err) {
              docpad.error(err);
              return complete();
            } else if (!(collection instanceof QueryCollection)) {
              docpad.warn(util.format(locale.errorInvalidCollection, name));
              return complete();
            }
            if (collection) {
              collection.live(true);
            }
            docpad.setCollection(name, collection);
            return complete();
          });
        });
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.resetCollections = function(opts, next) {
      var database, docpad, meta, ref2, scripts, styles;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      database = docpad.getDatabase();
      docpad.generated = false;
      database.reset([]);
      meta = this.getBlock('meta').reset([]);
      scripts = this.getBlock('scripts').reset([]);
      styles = this.getBlock('styles').reset([]);
      if (docpad.getConfig().poweredByDocPad !== false) {
        meta.add("<meta name=\"generator\" content=\"DocPad v" + (docpad.getVersion()) + "\" />");
      }
      this.filesByUrl = {};
      this.filesBySelector = {};
      this.filesByOutPath = {};
      next();
      return this;
    };

    DocPad.prototype.initGitRepo = function(opts, next) {
      var config, docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      if (opts.cwd == null) {
        opts.cwd = config.rootPath;
      }
      if (opts.output == null) {
        opts.output = this.getDebugging();
      }
      safeps.initGitRepo(opts, next);
      return this;
    };

    DocPad.prototype.initNodeModules = function(opts, next) {
      var config, docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      if (opts.cwd == null) {
        opts.cwd = config.rootPath;
      }
      if (opts.output == null) {
        opts.output = docpad.getDebugging();
      }
      if (opts.force == null) {
        opts.force = config.offline ? false : true;
      }
      if (opts.args == null) {
        opts.args = [];
      }
      if (config.force) {
        opts.args.push('--force');
      }
      if (config.offline) {
        opts.args.push('--no-registry');
      }
      if (opts.output) {
        docpad.log('info', 'npm install');
      }
      safeps.initNodeModules(opts, next);
      return this;
    };

    DocPad.prototype.fixNodePackageVersions = function(opts) {
      var config, docpad, next, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      if (opts.packagePath == null) {
        opts.packagePath = config.packagePath;
      }
      safefs.readFile(opts.packagePath, function(err, buffer) {
        var data;
        data = buffer.toString();
        data = data.replace(/("docpad(?:.*?)": ")\^/g, '$1~');
        return safefs.writeFile(opts.packagePath, data, function(err) {
          return next(err);
        });
      });
      return this;
    };

    DocPad.prototype.installNodeModule = function(names, opts) {
      var command, config, docpad, next, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      if (opts.cwd == null) {
        opts.cwd = config.rootPath;
      }
      if (opts.args == null) {
        opts.args = [];
      }
      if (docpad.getDebugging()) {
        if (opts.stdio == null) {
          opts.stdio = 'inherit';
        }
      }
      if (opts.global == null) {
        opts.global = false;
      }
      if (opts.global === true) {
        opts.global = ['--global'];
      }
      if (opts.global && Array.isArray(opts.global) === false) {
        opts.global = [opts.global];
      }
      if (opts.save == null) {
        opts.save = !opts.global;
      }
      if (opts.save === true) {
        opts.save = ['--save'];
      }
      if (opts.save && Array.isArray(opts.save) === false) {
        opts.save = [opts.save];
      }
      command = ['npm', 'install'];
      if (!typeChecker.isArray(names)) {
        names = names.split(/[,\s]+/);
      }
      names.forEach(function(name) {
        if (!name) {
          return;
        }
        if (name.indexOf('@') === -1) {
          name += '@latest';
        }
        return command.push(name);
      });
      command.push.apply(command, opts.args);
      if (config.force) {
        command.push('--force');
      }
      if (config.offline) {
        command.push('--no-registry');
      }
      if (opts.save) {
        command.push.apply(command, opts.save);
      }
      if (opts.global) {
        command.push.apply(command, opts.global);
      }
      if (opts.output) {
        docpad.log('info', command.join(' '));
      }
      safeps.spawn(command, opts, next);
      return this;
    };

    DocPad.prototype.uninstallNodeModule = function(names, opts) {
      var command, config, docpad, next, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      if (opts.cwd == null) {
        opts.cwd = config.rootPath;
      }
      if (opts.output == null) {
        opts.output = docpad.getDebugging();
      }
      if (opts.args == null) {
        opts.args = [];
      }
      if (opts.global == null) {
        opts.global = false;
      }
      if (opts.global === true) {
        opts.global = ['--global'];
      }
      if (opts.global && Array.isArray(opts.global) === false) {
        opts.global = [opts.global];
      }
      if (opts.save == null) {
        opts.save = !opts.global;
      }
      if (opts.save === true) {
        opts.save = ['--save', '--save-dev'];
      }
      if (opts.save && Array.isArray(opts.save) === false) {
        opts.save = [opts.save];
      }
      command = ['npm', 'uninstall'];
      if (!typeChecker.isArray(names)) {
        names = names.split(/[,\s]+/);
      }
      command.push.apply(command, names);
      command.push.apply(command, opts.args);
      if (opts.save) {
        command.push.apply(command, opts.save);
      }
      if (opts.global) {
        command.push.apply(command, opts.global);
      }
      if (opts.output) {
        docpad.log('info', command.join(' '));
      }
      safeps.spawn(command, opts, next);
      return this;
    };

    DocPad.prototype.setLogLevel = function(level) {
      var loggers;
      this.getLogger().setConfig({
        level: level
      });
      if (level === 7) {
        loggers = this.getLoggers();
        if ((loggers.debug != null) === false) {
          loggers.debug = loggers.logger.pipe(new (require('caterpillar-human').Human)({
            color: false
          })).pipe(require('fs').createWriteStream(this.debugLogPath));
        }
      }
      return this;
    };

    DocPad.prototype.getLogLevel = function() {
      return this.getConfig().logLevel;
    };

    DocPad.prototype.getDebugging = function() {
      return this.getLogLevel() === 7;
    };

    DocPad.prototype.fatal = function(err) {
      var config, docpad;
      docpad = this;
      config = this.getConfig();
      if (!err) {
        return this;
      }
      this.error(err);
      docpadUtil.writeError(err);
      this.destroy();
      return this;
    };

    DocPad.prototype.inspector = function(obj, opts) {
      if (opts == null) {
        opts = {};
      }
      if (opts.colors == null) {
        opts.colors = this.getConfig().color;
      }
      return docpadUtil.inspect(obj, opts);
    };

    DocPad.prototype.log = function() {
      var args, logger;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      logger = this.getLogger() || console;
      logger.log.apply(logger, args);
      return this;
    };

    DocPad.prototype.createError = function(err, opts) {
      var key, ref2, ref3, ref4, ref5, ref6, ref7, ref8, value;
      if (opts == null) {
        opts = {};
      }
      if (opts.level == null) {
        opts.level = (ref2 = err.level) != null ? ref2 : 'error';
      }
      if (opts.track == null) {
        opts.track = (ref3 = err.track) != null ? ref3 : true;
      }
      if (opts.tracked == null) {
        opts.tracked = (ref4 = err.tracked) != null ? ref4 : false;
      }
      if (opts.log == null) {
        opts.log = (ref5 = err.log) != null ? ref5 : true;
      }
      if (opts.logged == null) {
        opts.logged = (ref6 = err.logged) != null ? ref6 : false;
      }
      if (opts.notify == null) {
        opts.notify = (ref7 = err.notify) != null ? ref7 : true;
      }
      if (opts.notified == null) {
        opts.notified = (ref8 = err.notified) != null ? ref8 : false;
      }
      if (err.context != null) {
        if (opts.context == null) {
          opts.context = err.context;
        }
      }
      if (!err.stack) {
        err = new Error(err);
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        if (err[key] == null) {
          err[key] = value;
        }
      }
      return err;
    };

    DocPad.prototype.error = function(err, level) {
      var docpad;
      if (level == null) {
        level = 'err';
      }
      docpad = this;
      err = this.createError(err, {
        level: level
      });
      this.trackError(err);
      this.logError(err);
      this.notifyError(err);
      return this;
    };

    DocPad.prototype.logError = function(err) {
      var docpad, locale, message, occured, ref2;
      docpad = this;
      locale = this.getLocale();
      if (err && err.log !== false && err.logged !== true) {
        err = this.createError(err, {
          logged: true
        });
        occured = (ref2 = err.level) === 'warn' || ref2 === 'warning' ? locale.warnOccured : locale.errorOccured;
        message = err.context ? err.context + locale.errorFollows : occured;
        message += '\n\n' + err.stack.toString().trim();
        message += '\n\n' + locale.errorSubmission;
        docpad.log(err.level, message);
      }
      return this;
    };

    DocPad.prototype.trackError = function(err) {
      var config, data, docpad;
      docpad = this;
      config = this.getConfig();
      if (err && err.track !== false && err.tracked !== true && config.offline === false && config.reportErrors === true) {
        err = this.createError(err, {
          tracked: true
        });
        data = {};
        data.message = err.message;
        if (err.stack) {
          data.stack = err.stack.toString().trim();
        }
        data.config = config;
        data.env = process.env;
        docpad.track('error', data);
      }
      return this;
    };

    DocPad.prototype.notifyError = function(err) {
      var docpad, locale, occured, ref2;
      docpad = this;
      locale = this.getLocale();
      if (err.notify !== false && err.notified !== true) {
        err.notified = true;
        occured = (ref2 = err.level) === 'warn' || ref2 === 'warning' ? locale.warnOccured : locale.errorOccured;
        docpad.notify(err.message, {
          title: occured
        });
      }
      return this;
    };

    DocPad.prototype.warn = function(message, err) {
      if (err) {
        err.context = message;
        err.level = 'warn';
        this.error(err);
      } else {
        err = message instanceof Error ? message : new Error(message);
        err.level = 'warn';
        this.error(err);
      }
      return this;
    };

    DocPad.prototype.notify = function(message, opts) {
      var docpad;
      if (opts == null) {
        opts = {};
      }
      docpad = this;
      docpad.emitSerial('notify', {
        message: message,
        opts: opts
      }, function(err) {
        if (err) {
          return docpad.error(err);
        }
      });
      return this;
    };

    DocPad.prototype.checkRequest = function(next) {
      if (next == null) {
        next = this.error.bind(this);
      }
      return function(err, res) {
        var ref2, ref3;
        if (err) {
          return next(err, res);
        }
        if (((ref2 = res.body) != null ? ref2.success : void 0) === false || ((ref3 = res.body) != null ? ref3.error : void 0)) {
          err = new Error(res.body.error || 'unknown request error');
          return next(err, res);
        }
        return next(null, res);
      };
    };

    DocPad.prototype.subscribe = function(next) {
      var config, data, err, ref2;
      config = this.getConfig();
      if (config.offline === false) {
        if ((ref2 = this.userConfig) != null ? ref2.email : void 0) {
          data = {};
          data.email = this.userConfig.email;
          data.name = this.userConfig.name || null;
          data.username = this.userConfig.username || null;
          superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({
            method: 'add-subscriber'
          }).send(data).timeout(30 * 1000).end(this.checkRequest(next));
        } else {
          err = new Error('Email not provided');
          if (typeof next === "function") {
            next(err);
          }
        }
      } else {
        if (typeof next === "function") {
          next();
        }
      }
      return this;
    };

    DocPad.prototype.track = function(name, things, next) {
      var config, data, docpad, ref2, trackRunner;
      if (things == null) {
        things = {};
      }
      docpad = this;
      config = this.getConfig();
      if (config.offline === false && config.reportStatistics) {
        data = {};
        data.userId = this.userConfig.username || null;
        data.event = name;
        data.properties = things;
        if ((ref2 = this.websitePackageConfig) != null ? ref2.name : void 0) {
          things.websiteName = this.websitePackageConfig.name;
        }
        things.platform = this.getProcessPlatform();
        things.environment = this.getEnvironment();
        things.version = this.getVersion();
        things.nodeVersion = this.getProcessVersion();
        eachr(docpad.loadedPlugins, function(value, key) {
          return things['plugin-' + key] = value.version || true;
        });
        trackRunner = docpad.getTrackRunner();
        trackRunner.addTask('track task', function(complete) {
          return superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({
            method: 'analytics',
            action: 'track'
          }).send(data).timeout(30 * 1000).end(docpad.checkRequest(function(err) {
            if (typeof next === "function") {
              next(err);
            }
            return complete(err);
          }));
        });
        trackRunner.run();
      } else {
        if (typeof next === "function") {
          next();
        }
      }
      return this;
    };

    DocPad.prototype.identify = function(next) {
      var config, data, docpad, now, ref2, things;
      docpad = this;
      config = this.getConfig();
      if (config.offline === false && config.reportStatistics && ((ref2 = this.userConfig) != null ? ref2.username : void 0)) {
        data = {};
        data.userId = this.userConfig.username;
        data.traits = things = {};
        now = new Date();
        things.username = this.userConfig.username;
        things.email = this.userConfig.email || null;
        things.name = this.userConfig.name || null;
        things.lastLogin = now.toISOString();
        things.lastSeen = now.toISOString();
        things.countryCode = safeps.getCountryCode();
        things.languageCode = safeps.getLanguageCode();
        things.platform = this.getProcessPlatform();
        things.version = this.getVersion();
        things.nodeVersion = this.getProcessVersion();
        if (docpad.userConfig.identified !== true) {
          things.created = now.toISOString();
          docpad.getTrackRunner().addTask('create new user', function(complete) {
            return superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({
              method: 'analytics',
              action: 'identify'
            }).send(data).timeout(30 * 1000).end(docpad.checkRequest(function(err) {
              return docpad.updateUserConfig({
                identified: true
              }, complete);
            }));
          });
        } else {
          docpad.getTrackRunner().addTask('update user', function(complete) {
            return superAgent.post(config.helperUrl).type('json').set('Accept', 'application/json').query({
              method: 'analytics',
              action: 'identify'
            }).send(data).timeout(30 * 1000).end(docpad.checkRequest(complete));
          });
        }
      }
      if (typeof next === "function") {
        next();
      }
      return this;
    };

    DocPad.prototype.createFile = function(attrs, opts) {
      if (attrs == null) {
        attrs = {};
      }
      if (opts == null) {
        opts = {};
      }
      opts.modelType = 'file';
      return this.createModel(attrs, opts);
    };

    DocPad.prototype.createDocument = function(attrs, opts) {
      if (attrs == null) {
        attrs = {};
      }
      if (opts == null) {
        opts = {};
      }
      opts.modelType = 'document';
      return this.createModel(attrs, opts);
    };

    DocPad.prototype.parseFileDirectory = function(opts, next) {
      if (opts == null) {
        opts = {};
      }
      if (opts.modelType == null) {
        opts.modelType = 'file';
      }
      if (opts.collection == null) {
        opts.collection = this.getDatabase();
      }
      return this.parseDirectory(opts, next);
    };

    DocPad.prototype.parseDocumentDirectory = function(opts, next) {
      if (opts == null) {
        opts = {};
      }
      if (opts.modelType == null) {
        opts.modelType = 'document';
      }
      if (opts.collection == null) {
        opts.collection = this.getDatabase();
      }
      return this.parseDirectory(opts, next);
    };

    DocPad.prototype.attachModelEvents = function(model) {
      var docpad;
      docpad = this;
      if (model.attachedDocumentEvents !== true) {
        model.attachedDocumentEvents = true;
        if (model.type === 'document') {
          model.on('clone', function(clonedModel) {
            return docpad.attachModelEvents(clonedModel);
          });
          model.on('render', function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return docpad.emitSerial.apply(docpad, ['render'].concat(slice.call(args)));
          });
          model.on('renderDocument', function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return docpad.emitSerial.apply(docpad, ['renderDocument'].concat(slice.call(args)));
          });
          model.on('getLayout', function(opts, next) {
            var layout;
            if (opts == null) {
              opts = {};
            }
            opts.collection = docpad.getCollection('layouts');
            layout = docpad.getFileBySelector(opts.selector, opts);
            return next(null, {
              layout: layout
            });
          });
        }
        model.on('error', function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return docpad.error.apply(docpad, args);
        });
        model.on('log', function() {
          var args, ref2, ref3;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          if (args.length === 2) {
            if ((ref2 = args[0]) === 'err' || ref2 === 'error') {
              docpad.error(args[1]);
              return;
            }
            if ((ref3 = args[0]) === 'warn' || ref3 === 'warning') {
              docpad.warn(args[1]);
              return;
            }
          }
          return docpad.log.apply(docpad, args);
        });
      }
      return this;
    };

    DocPad.prototype.addModel = function(model, opts) {
      model = this.createModel(model, opts);
      this.getDatabase().add(model);
      return model;
    };

    DocPad.prototype.addModels = function(models, opts) {
      models = this.createModels(models, opts);
      this.getDatabase().add(models);
      return models;
    };

    DocPad.prototype.createModels = function(models, opts) {
      var i, len, model, results;
      results = [];
      for (i = 0, len = models.length; i < len; i++) {
        model = models[i];
        results.push(this.createModel(model, opts));
      }
      return results;
    };

    DocPad.prototype.createModel = function(attrs, opts) {
      var config, database, dirPath, docpad, fileFullPath, i, j, len, len1, model, ref2, ref3, result;
      if (attrs == null) {
        attrs = {};
      }
      if (opts == null) {
        opts = {};
      }
      if (attrs instanceof FileModel) {
        return attrs;
      }
      docpad = this;
      config = this.getConfig();
      database = this.getDatabase();
      fileFullPath = attrs.fullPath || null;
      if (attrs.fullPath) {
        result = database.findOne({
          fullPath: attrs.fullPath
        });
        if (result) {
          return result;
        }
      }
      if (fileFullPath) {
        if (!opts.modelType) {
          ref2 = config.documentsPaths.concat(config.layoutsPaths);
          for (i = 0, len = ref2.length; i < len; i++) {
            dirPath = ref2[i];
            if (fileFullPath.indexOf(dirPath) === 0) {
              attrs.relativePath || (attrs.relativePath = fileFullPath.replace(dirPath, '').replace(/^[\/\\]/, ''));
              opts.modelType = 'document';
              break;
            }
          }
        }
        if (!opts.modelType) {
          ref3 = config.filesPaths;
          for (j = 0, len1 = ref3.length; j < len1; j++) {
            dirPath = ref3[j];
            if (fileFullPath.indexOf(dirPath) === 0) {
              attrs.relativePath || (attrs.relativePath = fileFullPath.replace(dirPath, '').replace(/^[\/\\]/, ''));
              opts.modelType = 'file';
              break;
            }
          }
        }
      }
      opts = extendr.extend({
        detectEncoding: config.detectEncoding,
        rootOutDirPath: config.outPath,
        locale: this.getLocale(),
        TaskGroup: this.TaskGroup
      }, opts);
      if (opts.modelType === 'file') {
        model = new FileModel(attrs, opts);
      } else {
        model = new DocumentModel(attrs, opts);
      }
      this.attachModelEvents(model);
      return model;
    };

    DocPad.prototype.parseDirectory = function(opts, next) {
      var createFunction, docpad, files, locale, path, ref2;
      if (opts == null) {
        opts = {};
      }
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      locale = this.getLocale();
      path = opts.path, createFunction = opts.createFunction;
      if (createFunction == null) {
        createFunction = this.createModel;
      }
      files = opts.collection || new FilesCollection();
      safefs.exists(path, function(exists) {
        if (!exists) {
          docpad.log('debug', util.format(locale.renderDirectoryNonexistant, path));
          return next();
        }
        docpad.log('debug', util.format(locale.renderDirectoryParsing, path));
        return docpad.scandir({
          path: path,
          fileAction: function(fileFullPath, fileRelativePath, nextFile, fileStat) {
            var data, file;
            data = {
              fullPath: fileFullPath,
              relativePath: fileRelativePath,
              stat: fileStat
            };
            file = createFunction.call(docpad, data, opts);
            return file.action('load', function(err) {
              if (err) {
                return nextFile(err);
              }
              files.add(file);
              return nextFile();
            });
          },
          next: function(err) {
            if (err) {
              return next(err);
            }
            docpad.log('debug', util.format(locale.renderDirectoryParsed, path));
            return next(null, files);
          }
        });
      });
      return this;
    };

    DocPad.prototype.getPlugin = function(pluginName) {
      return this.loadedPlugins[pluginName];
    };

    DocPad.prototype.hasPlugins = function() {
      return typeChecker.isEmptyObject(this.loadedPlugins) === false;
    };

    DocPad.prototype.destroyPlugins = function() {
      var name, plugin, ref2;
      ref2 = this.loadedPlugins;
      for (name in ref2) {
        if (!hasProp.call(ref2, name)) continue;
        plugin = ref2[name];
        plugin.destroy();
        this.loadedPlugins[name] = null;
      }
      return this;
    };

    DocPad.prototype.loadPlugins = function(next) {
      var docpad, locale, snore, tasks;
      docpad = this;
      locale = this.getLocale();
      this.slowPlugins = {};
      snore = balUtil.createSnore(function() {
        return docpad.log('notice', util.format(locale.pluginsSlow, Object.keys(docpad.slowPlugins).join(', ')));
      });
      tasks = new this.TaskGroup("loadPlugins tasks", {
        concurrency: 0,
        next: function(err) {
          docpad.slowPlugins = {};
          snore.clear();
          return next(err);
        }
      });
      (this.config.pluginsPaths || []).forEach(function(pluginsPath) {
        return tasks.addTask("load the website's plugins at: " + pluginsPath, function(complete) {
          return safefs.exists(pluginsPath, function(exists) {
            if (!exists) {
              return complete();
            }
            return docpad.loadPluginsIn(pluginsPath, complete);
          });
        });
      });
      (this.config.pluginPaths || []).forEach(function(pluginPath) {
        return tasks.addTask("load custom plugins at: " + pluginPath, function(complete) {
          return safefs.exists(pluginPath, function(exists) {
            if (!exists) {
              return complete();
            }
            return docpad.loadPlugin(pluginPath, complete);
          });
        });
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.loadedPlugin = function(pluginName, next) {
      var docpad, loaded;
      docpad = this;
      loaded = docpad.loadedPlugins[pluginName] != null;
      next(null, loaded);
      return this;
    };

    DocPad.prototype.loadPlugin = function(fileFullPath, _next) {
      var config, docpad, enabled, loader, locale, next, pluginName;
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      next = function(err) {
        delete docpad.slowPlugins[pluginName];
        return _next(err);
      };
      loader = new PluginLoader({
        dirPath: fileFullPath,
        docpad: this,
        BasePlugin: BasePlugin
      });
      pluginName = loader.pluginName;
      enabled = (config.enableUnlistedPlugins && (config.enabledPlugins[pluginName] != null) === false) || config.enabledPlugins[pluginName] === true;
      if (docpad.loadedPlugins[pluginName] != null) {
        docpad.loadedPlugins[pluginName].setConfig();
        return _next();
      }
      docpad.slowPlugins[pluginName] = true;
      if (!enabled) {
        docpad.log('debug', util.format(locale.pluginSkipped, pluginName));
        return next();
      } else {
        docpad.log('debug', util.format(locale.pluginLoading, pluginName));
        loader.exists(function(err, exists) {
          if (err || !exists) {
            return next(err);
          }
          return loader.unsupported(function(err, unsupported) {
            if (err) {
              return next(err);
            }
            if (unsupported) {
              if ((unsupported === 'version-docpad' || unsupported === 'version-plugin') && config.skipUnsupportedPlugins === false) {
                docpad.log('warn', util.format(locale.pluginContinued, pluginName));
              } else {
                if (unsupported === 'type') {
                  docpad.log('debug', util.format(locale.pluginSkippedDueTo, pluginName, unsupported));
                } else {
                  docpad.log('warn', util.format(locale.pluginSkippedDueTo, pluginName, unsupported));
                }
                return next();
              }
            }
            return loader.load(function(err) {
              if (err) {
                return next(err);
              }
              return loader.create({}, function(err, pluginInstance) {
                if (err) {
                  return next(err);
                }
                docpad.loadedPlugins[loader.pluginName] = pluginInstance;
                docpad.log('debug', util.format(locale.pluginLoaded, pluginName));
                return next();
              });
            });
          });
        });
      }
      return this;
    };

    DocPad.prototype.loadPluginsIn = function(pluginsPath, next) {
      var docpad, locale;
      docpad = this;
      locale = this.getLocale();
      docpad.log('debug', util.format(locale.pluginsLoadingFor, pluginsPath));
      this.scandir({
        path: pluginsPath,
        fileAction: false,
        dirAction: function(fileFullPath, fileRelativePath, nextFile) {
          var pluginName;
          pluginName = pathUtil.basename(fileFullPath);
          if (fileFullPath === pluginsPath) {
            return nextFile(null, false);
          }
          return docpad.loadPlugin(fileFullPath, function(err) {
            if (err) {
              docpad.warn(util.format(locale.pluginFailedToLoad, pluginName, fileFullPath), err);
            }
            return nextFile(null, true);
          });
        },
        next: function(err) {
          docpad.log('debug', util.format(locale.pluginsLoadedFor, pluginsPath));
          return next(err);
        }
      });
      return this;
    };

    DocPad.prototype.compareVersion = function() {
      var config, docpad, locale;
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      if (config.offline || !config.checkVersion) {
        return this;
      }
      balUtil.packageCompare({
        local: this.packagePath,
        remote: config.helperUrl + 'latest',
        newVersionCallback: function(details) {
          var currentVersion, isLocalInstallation, latestVersion, message, messageFilled, upgradeUrl;
          isLocalInstallation = docpadUtil.isLocalDocPadExecutable();
          message = (isLocalInstallation ? locale.versionOutdatedLocal : locale.versionOutdatedGlobal);
          currentVersion = 'v' + details.local.version;
          latestVersion = 'v' + details.remote.version;
          upgradeUrl = details.local.upgradeUrl || details.remote.installUrl || details.remote.homepage;
          messageFilled = util.format(message, currentVersion, latestVersion, upgradeUrl);
          docpad.notify(latestVersion, {
            title: locale.versionOutdatedNotification
          });
          return docpad.log('notice', messageFilled);
        }
      });
      return this;
    };

    DocPad.prototype.getExchange = function(next) {
      var config, docpad, exchangeUrl, locale;
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      if (typeChecker.isEmptyObject(docpad.exchange) === false) {
        return next(null, docpad.exchange);
      }
      if (config.offline) {
        return next(null, null);
      }
      docpad.log('info', locale.exchangeUpdate + ' ' + locale.pleaseWait);
      exchangeUrl = config.helperUrl + '?method=exchange&version=' + this.version;
      docpad.loadConfigUrl(exchangeUrl, function(err, parsedData) {
        if (err) {
          locale = docpad.getLocale();
          docpad.warn(locale.exchangeError, err);
          return next();
        }
        docpad.log('info', locale.exchangeUpdated);
        docpad.exchange = parsedData;
        return next(null, parsedData);
      });
      return this;
    };

    DocPad.prototype.contextualizeFiles = function(opts, next) {
      var collection, config, docpad, locale, ref2, ref3, slowFilesObject, slowFilesTimer, templateData;
      if (opts == null) {
        opts = {};
      }
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      collection = opts.collection, templateData = opts.templateData;
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      slowFilesObject = {};
      slowFilesTimer = null;
      if ((ref3 = opts.progress) != null) {
        ref3.step("contextualizeFiles (preparing)").total(1).setTick(0);
      }
      docpad.log('debug', util.format(locale.contextualizingFiles, collection.length));
      docpad.emitSerial('contextualizeBefore', {
        collection: collection,
        templateData: templateData
      }, function(err) {
        var ref4, tasks;
        if (err) {
          return next(err);
        }
        tasks = new docpad.TaskGroup("contextualizeFiles tasks", {
          concurrency: 0,
          next: function(err) {
            var ref4;
            clearInterval(slowFilesTimer);
            slowFilesTimer = null;
            if (err) {
              return next(err);
            }
            if ((ref4 = opts.progress) != null) {
              ref4.step("contextualizeFiles (postparing)").total(1).setTick(0);
            }
            return docpad.emitSerial('contextualizeAfter', {
              collection: collection
            }, function(err) {
              if (err) {
                return next(err);
              }
              docpad.log('debug', util.format(locale.contextualizedFiles, collection.length));
              return next();
            });
          }
        });
        if ((ref4 = opts.progress) != null) {
          ref4.step('contextualizeFiles').total(collection.length).setTick(0);
        }
        collection.forEach(function(file, index) {
          var filePath;
          filePath = file.getFilePath();
          slowFilesObject[file.id] = file.get('relativePath') || file.id;
          return tasks.addTask("conextualizing: " + filePath, function(complete) {
            return file.action('contextualize', function(err) {
              var ref5;
              delete slowFilesObject[file.id];
              if ((ref5 = opts.progress) != null) {
                ref5.tick();
              }
              return complete(err);
            });
          });
        });
        slowFilesTimer = setInterval(function() {
          var key, slowFilesArray, value;
          slowFilesArray = (function() {
            var results;
            results = [];
            for (key in slowFilesObject) {
              if (!hasProp.call(slowFilesObject, key)) continue;
              value = slowFilesObject[key];
              results.push(value || key);
            }
            return results;
          })();
          return docpad.log('info', util.format(locale.slowFiles, 'contextualizeFiles') + ' \n' + slowFilesArray.join('\n'));
        }, config.slowFilesDelay);
        return tasks.run();
      });
      return this;
    };

    DocPad.prototype.renderFiles = function(opts, next) {
      var collection, config, docpad, locale, ref2, ref3, renderCollection, renderFile, renderPasses, slowFilesObject, slowFilesTimer, templateData;
      if (opts == null) {
        opts = {};
      }
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      collection = opts.collection, templateData = opts.templateData, renderPasses = opts.renderPasses;
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      slowFilesObject = {};
      slowFilesTimer = null;
      if ((ref3 = opts.progress) != null) {
        ref3.step("renderFiles (preparing)").total(1).setTick(0);
      }
      docpad.log('debug', util.format(locale.renderingFiles, collection.length));
      renderFile = function(file, next) {
        if (file.get('render') === false || !file.get('relativePath')) {
          file.attributes.rtime = new Date();
          next(null, file.getOutContent(), file);
        } else {
          file.action('render', {
            templateData: templateData
          }, next);
        }
        return file;
      };
      renderCollection = function(collectionToRender, arg, next) {
        var renderPass;
        renderPass = arg.renderPass;
        return docpad.emitSerial('renderCollectionBefore', {
          collection: collectionToRender,
          renderPass: renderPass
        }, function(err) {
          var ref4, subTasks;
          if (err) {
            return next(err);
          }
          subTasks = new docpad.TaskGroup("renderCollection: " + collectionToRender.options.name, {
            concurrency: 0,
            next: function(err) {
              if (err) {
                return next(err);
              }
              return docpad.emitSerial('renderCollectionAfter', {
                collection: collectionToRender,
                renderPass: renderPass
              }, next);
            }
          });
          if ((ref4 = opts.progress) != null) {
            ref4.step("renderFiles (pass " + renderPass + ")").total(collectionToRender.length).setTick(0);
          }
          collectionToRender.forEach(function(file) {
            var filePath;
            filePath = file.getFilePath();
            slowFilesObject[file.id] = file.get('relativePath');
            return subTasks.addTask("rendering: " + filePath, function(complete) {
              return renderFile(file, function(err) {
                var ref5;
                delete slowFilesObject[file.id] || file.id;
                if ((ref5 = opts.progress) != null) {
                  ref5.tick();
                }
                return complete(err);
              });
            });
          });
          subTasks.run();
          return collectionToRender;
        });
      };
      docpad.emitSerial('renderBefore', {
        collection: collection,
        templateData: templateData
      }, function(err) {
        var i, initialCollection, results, subsequentCollection, tasks;
        if (err) {
          return next(err);
        }
        tasks = new docpad.TaskGroup("renderCollection: renderBefore tasks", {
          next: function(err) {
            var ref4;
            clearInterval(slowFilesTimer);
            slowFilesTimer = null;
            if (err) {
              return next(err);
            }
            if ((ref4 = opts.progress) != null) {
              ref4.step("renderFiles (postparing)").total(1).setTick(0);
            }
            return docpad.emitSerial('renderAfter', {
              collection: collection
            }, function(err) {
              if (err) {
                return next(err);
              }
              docpad.log('debug', util.format(locale.renderedFiles, collection.length));
              return next();
            });
          }
        });
        initialCollection = collection.findAll({
          'referencesOthers': false
        });
        subsequentCollection = null;
        tasks.addTask("rendering the initial collection", function(complete) {
          return renderCollection(initialCollection, {
            renderPass: 1
          }, function(err) {
            if (err) {
              return complete(err);
            }
            subsequentCollection = collection.findAll({
              'referencesOthers': true
            });
            return renderCollection(subsequentCollection, {
              renderPass: 2
            }, complete);
          });
        });
        if (renderPasses > 1) {
          (function() {
            results = [];
            for (var i = 3; 3 <= renderPasses ? i <= renderPasses : i >= renderPasses; 3 <= renderPasses ? i++ : i--){ results.push(i); }
            return results;
          }).apply(this).forEach(function(renderPass) {
            return tasks.addTask("rendering the subsequent collection index " + renderPass, function(complete) {
              return renderCollection(subsequentCollection, {
                renderPass: renderPass
              }, complete);
            });
          });
        }
        slowFilesTimer = setInterval(function() {
          var key, slowFilesArray, value;
          slowFilesArray = (function() {
            var results1;
            results1 = [];
            for (key in slowFilesObject) {
              if (!hasProp.call(slowFilesObject, key)) continue;
              value = slowFilesObject[key];
              results1.push(value || key);
            }
            return results1;
          })();
          return docpad.log('info', util.format(locale.slowFiles, 'renderFiles') + ' \n' + slowFilesArray.join('\n'));
        }, config.slowFilesDelay);
        return tasks.run();
      });
      return this;
    };

    DocPad.prototype.writeFiles = function(opts, next) {
      var collection, config, docpad, locale, ref2, ref3, slowFilesObject, slowFilesTimer, templateData;
      if (opts == null) {
        opts = {};
      }
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      collection = opts.collection, templateData = opts.templateData;
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      slowFilesObject = {};
      slowFilesTimer = null;
      if ((ref3 = opts.progress) != null) {
        ref3.step("writeFiles (preparing)").total(1).setTick(0);
      }
      docpad.log('debug', util.format(locale.writingFiles, collection.length));
      docpad.emitSerial('writeBefore', {
        collection: collection,
        templateData: templateData
      }, function(err) {
        var ref4, tasks;
        if (err) {
          return next(err);
        }
        tasks = new docpad.TaskGroup("writeFiles tasks", {
          concurrency: 0,
          next: function(err) {
            var ref4;
            clearInterval(slowFilesTimer);
            slowFilesTimer = null;
            if (err) {
              return next(err);
            }
            if ((ref4 = opts.progress) != null) {
              ref4.step("writeFiles (postparing)").total(1).setTick(0);
            }
            return docpad.emitSerial('writeAfter', {
              collection: collection
            }, function(err) {
              if (err) {
                return next(err);
              }
              return next();
            });
          }
        });
        if ((ref4 = opts.progress) != null) {
          ref4.step('writeFiles').total(collection.length).setTick(0);
        }
        collection.forEach(function(file, index) {
          var filePath;
          filePath = file.getFilePath();
          return tasks.addTask("writing the file: " + filePath, function(complete) {
            var fileTasks;
            slowFilesObject[file.id] = file.get('relativePath');
            fileTasks = new docpad.TaskGroup("tasks for file write: " + filePath, {
              concurrency: 0,
              next: function(err) {
                var ref5;
                delete slowFilesObject[file.id];
                if ((ref5 = opts.progress) != null) {
                  ref5.tick();
                }
                return complete(err);
              }
            });
            if (file.get('write') !== false && file.get('dynamic') !== true && file.get('outPath')) {
              fileTasks.addTask("write out", function(complete) {
                return file.action('write', complete);
              });
            }
            if (file.get('writeSource') === true && file.get('fullPath')) {
              fileTasks.addTask("write source", function(complete) {
                return file.action('writeSource', complete);
              });
            }
            return fileTasks.run();
          });
        });
        slowFilesTimer = setInterval(function() {
          var key, slowFilesArray, value;
          slowFilesArray = (function() {
            var results;
            results = [];
            for (key in slowFilesObject) {
              if (!hasProp.call(slowFilesObject, key)) continue;
              value = slowFilesObject[key];
              results.push(value || key);
            }
            return results;
          })();
          return docpad.log('info', util.format(locale.slowFiles, 'writeFiles') + ' \n' + slowFilesArray.join('\n'));
        }, config.slowFilesDelay);
        return tasks.run();
      });
      return this;
    };

    DocPad.prototype.generateStarted = null;

    DocPad.prototype.generateEnded = null;

    DocPad.prototype.generating = false;

    DocPad.prototype.generated = false;

    DocPad.prototype.createProgress = function() {
      var config, docpad, progress;
      docpad = this;
      config = docpad.getConfig();
      progress = null;
      if (config.progress && config.prompts && this.getLogLevel() === 6) {
        progress = require('progressbar').create();
        this.getLoggers().console.unpipe(process.stdout);
        this.getLogger().once('log', progress.logListener != null ? progress.logListener : progress.logListener = function(data) {
          if (data.levelNumber <= 5) {
            return docpad.destroyProgress(progress);
          }
        });
      }
      return progress;
    };

    DocPad.prototype.destroyProgress = function(progress) {
      if (progress) {
        progress.finish();
        this.getLoggers().console.unpipe(process.stdout).pipe(process.stdout);
      }
      return progress;
    };

    DocPad.prototype.destroyRegenerateTimer = function() {
      var docpad;
      docpad = this;
      if (docpad.regenerateTimer) {
        clearTimeout(docpad.regenerateTimer);
        docpad.regenerateTimer = null;
      }
      return this;
    };

    DocPad.prototype.createRegenerateTimer = function() {
      var config, docpad, locale;
      docpad = this;
      locale = docpad.getLocale();
      config = docpad.getConfig();
      if (config.regenerateEvery) {
        docpad.regenerateTimer = setTimeout(function() {
          docpad.log('info', locale.renderInterval);
          return docpad.action('generate', config.regenerateEveryOptions);
        }, config.regenerateEvery);
      }
      return this;
    };

    DocPad.prototype.generate = function(opts, next) {
      var addGroup, addTask, config, database, docpad, lastGenerateStarted, locale, ref2, ref3, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = docpad.getConfig();
      locale = docpad.getLocale();
      database = docpad.getDatabase();
      if (((ref3 = opts.collection) != null ? ref3.length : void 0) === 0) {
        return next();
      }
      lastGenerateStarted = docpad.generateStarted;
      docpad.generateStarted = new Date();
      docpad.generateEnded = null;
      docpad.generating = true;
      if (database.models.length) {
        docpad.databaseTempCache = new FilesCollection(database.models);
      }
      if (opts.progress == null) {
        opts.progress = docpad.createProgress();
      }
      opts.templateData = docpad.getTemplateData(opts.templateData || {});
      opts.renderPasses || (opts.renderPasses = config.renderPasses);
      docpad.destroyRegenerateTimer();
      if (!docpad.hasPlugins()) {
        docpad.log('notice', locale.renderNoPlugins);
      }
      docpad.log('info', locale.renderGenerating);
      docpad.notify((new Date()).toLocaleTimeString(), {
        title: locale.renderGeneratingNotification
      });
      tasks = new this.TaskGroup("generate tasks", {
        progress: opts.progress
      }).done(function(err) {
        var howMany, ref4, seconds;
        docpad.generating = false;
        docpad.generateEnded = new Date();
        docpad.databaseTempCache = null;
        docpad.createRegenerateTimer();
        if (opts.progress) {
          docpad.destroyProgress(opts.progress);
          opts.progress = null;
        }
        if (err) {
          return next(err);
        }
        seconds = (docpad.generateEnded - docpad.generateStarted) / 1000;
        howMany = (((ref4 = opts.collection) != null ? ref4.length : void 0) || 0) + "/" + database.length;
        docpad.log('info', util.format(locale.renderGenerated, howMany, seconds));
        docpad.notify((new Date()).toLocaleTimeString(), {
          title: locale.renderGeneratedNotification
        });
        if (opts.initial === true) {
          docpad.generated = true;
          return docpad.emitSerial('generated', opts, next);
        } else if (docpad.generated === false) {
          return next(new Error('DocPad is in an invalid state, please report this on the github issue tracker. Reference 3360'));
        } else {
          return next();
        }
      });
      addGroup = tasks.addGroup.bind(tasks);
      addTask = tasks.addTask.bind(tasks);
      addTask('Reset our collections', function(complete) {
        if (!(opts.reset === true || docpad.generated === false)) {
          return complete();
        }
        return docpad.resetCollections(opts, complete);
      });
      addTask('Figure out options', function() {
        if (opts.cache == null) {
          opts.cache = config.databaseCache;
        }
        if (opts.initial == null) {
          opts.initial = !docpad.generated;
        }
        if (opts.reset == null) {
          opts.reset = opts.initial;
        }
        if (opts.populate == null) {
          opts.populate = opts.reset;
        }
        if (opts.reload == null) {
          opts.reload = opts.reset;
        }
        if (opts.partial == null) {
          opts.partial = !opts.reset;
        }
        return docpad.log('debug', 'Generate options:', pick(opts, ['cache', 'initial', 'reset', 'populate', 'reload', 'partial', 'renderPasses']));
      });
      addTask('check source directory exists', function(complete) {
        if (opts.initial !== true) {
          return complete();
        }
        return safefs.exists(config.srcPath, function(exists) {
          var err;
          if (!exists) {
            err = new Error(locale.renderNonexistant);
            return complete(err);
          }
          return complete();
        });
      });
      addGroup('fetch data to render', function(addGroup, addTask) {
        var ref4;
        if (opts.populate === true) {
          addTask('populateCollectionsBefore', function(complete) {
            return docpad.emitSerial('populateCollectionsBefore', opts, complete);
          });
          if (opts.initial === true && ((ref4 = opts.cache) === true || ref4 === 'read')) {
            addTask('import data from cache', function(complete) {
              return safefs.exists(config.databaseCachePath, function(exists) {
                if (exists === false) {
                  return complete();
                }
                return safefs.readFile(config.databaseCachePath, function(err, data) {
                  var addedModels, databaseData;
                  if (err) {
                    return complete(err);
                  }
                  databaseData = JSON.parse(data.toString());
                  opts.cache = true;
                  opts.initial = true;
                  opts.reset = false;
                  opts.populate = true;
                  opts.reload = true;
                  opts.partial = true;
                  lastGenerateStarted = new Date(databaseData.generateStarted);
                  addedModels = docpad.addModels(databaseData.models);
                  docpad.log('info', util.format(locale.databaseCacheRead, database.length, databaseData.models.length));
                  return complete();
                });
              });
            });
          }
          if (opts.reload === true) {
            addGroup('import data from file system', function(addGroup, addTask) {
              config.documentsPaths.forEach(function(documentsPath) {
                return addTask('import documents', function(complete) {
                  return docpad.parseDirectory({
                    modelType: 'document',
                    collection: database,
                    path: documentsPath,
                    next: complete
                  });
                });
              });
              config.filesPaths.forEach(function(filesPath) {
                return addTask('import files', function(complete) {
                  return docpad.parseDirectory({
                    modelType: 'file',
                    collection: database,
                    path: filesPath,
                    next: complete
                  });
                });
              });
              return config.layoutsPaths.forEach(function(layoutsPath) {
                return addTask('import layouts', function(complete) {
                  return docpad.parseDirectory({
                    modelType: 'document',
                    collection: database,
                    path: layoutsPath,
                    next: complete
                  });
                });
              });
            });
          }
          return addTask('populateCollections', function(complete) {
            return docpad.emitSerial('populateCollections', opts, complete);
          });
        }
      });
      addGroup('determine files to render', function(addGroup, addTask) {
        if (opts.partial === false) {
          return addTask('Add all database models to render queue', function() {
            return opts.collection != null ? opts.collection : opts.collection = new FilesCollection().add(docpad.getCollection('generate').models);
          });
        } else {
          return addTask('Add only changed models to render queue', function() {
            var changedQuery;
            changedQuery = {
              $or: {
                mtime: {
                  $gte: lastGenerateStarted
                },
                $and: {
                  wtime: null,
                  write: true
                }
              }
            };
            return opts.collection != null ? opts.collection : opts.collection = new FilesCollection().add(docpad.getCollection('generate').findAll(changedQuery).models);
          });
        }
      });
      addTask('generateBefore', function(complete) {
        if (opts.collection.length === 0) {
          tasks.clear();
          return complete();
        } else {
          return docpad.emitSerial('generateBefore', opts, complete);
        }
      });
      addTask('prepare files', function(complete) {
        var addLayoutChildren, allStandalone, model, standalones;
        docpad.log('debug', 'Files to generate at', lastGenerateStarted, '\n', (function() {
          var i, len, ref4, results;
          ref4 = opts.collection.models;
          results = [];
          for (i = 0, len = ref4.length; i < len; i++) {
            model = ref4[i];
            results.push({
              id: model.id,
              path: model.getFilePath(),
              mtime: model.get('mtime'),
              wtime: model.get('wtime'),
              dynamic: model.get('dynamic'),
              ignored: model.get('ignored'),
              write: model.get('write')
            });
          }
          return results;
        })());
        standalones = opts.collection.pluck('standalone');
        allStandalone = standalones.indexOf(false) === -1;
        if (allStandalone === false) {
          opts.collection.add(docpad.getCollection('referencesOthers').models);
        }
        addLayoutChildren = function(collection) {
          return collection.forEach(function(file) {
            var layoutChildrenCollection, layoutChildrenQuery;
            if (file.get('isLayout') === true) {
              layoutChildrenQuery = {
                layoutRelativePath: file.get('relativePath')
              };
              layoutChildrenCollection = docpad.getCollection('hasLayout').findAll(layoutChildrenQuery);
              docpad.log('debug', 'Layout children to generate at', lastGenerateStarted, '\n', (function() {
                var i, len, ref4, results;
                ref4 = layoutChildrenCollection.models;
                results = [];
                for (i = 0, len = ref4.length; i < len; i++) {
                  model = ref4[i];
                  results.push({
                    id: model.id,
                    path: model.getFilePath(),
                    mtime: model.get('mtime'),
                    wtime: model.get('wtime'),
                    write: model.get('write')
                  });
                }
                return results;
              })(), '\n', layoutChildrenQuery);
              addLayoutChildren(layoutChildrenCollection);
              return opts.collection.add(layoutChildrenCollection.models);
            }
          });
        };
        addLayoutChildren(opts.collection);
        opts.collection.reset(opts.collection.reject(function(file) {
          return file.get('render') === false && file.get('write') === false;
        }));
        docpad.log('debug', 'Files to generate at', lastGenerateStarted, '\n', (function() {
          var i, len, ref4, results;
          ref4 = opts.collection.models;
          results = [];
          for (i = 0, len = ref4.length; i < len; i++) {
            model = ref4[i];
            results.push({
              id: model.id,
              path: model.getFilePath(),
              mtime: model.get('mtime'),
              wtime: model.get('wtime'),
              dynamic: model.get('dynamic'),
              ignored: model.get('ignored'),
              write: model.get('write')
            });
          }
          return results;
        })());
        return complete();
      });
      addGroup('process file', function(addGroup, addTask) {
        addTask('contextualizeFiles', {
          args: [opts]
        }, docpad.contextualizeFiles.bind(docpad));
        addTask('renderFiles', {
          args: [opts]
        }, docpad.renderFiles.bind(docpad));
        return addTask('writeFiles', {
          args: [opts]
        }, docpad.writeFiles.bind(docpad));
      });
      addTask('generateAfter', function(complete) {
        return docpad.emitSerial('generateAfter', opts, complete);
      });
      addTask('Write the database cache', function(complete) {
        var databaseData, databaseDataDump, model, ref4;
        if ((ref4 = opts.cache) !== true && ref4 !== 'write') {
          return complete();
        }
        databaseData = {
          generateStarted: docpad.generateStarted,
          generateEnded: docpad.generateEnded,
          models: (function() {
            var i, len, ref5, results;
            ref5 = database.models;
            results = [];
            for (i = 0, len = ref5.length; i < len; i++) {
              model = ref5[i];
              results.push(model.getAttributes());
            }
            return results;
          })()
        };
        databaseDataDump = JSON.stringify(databaseData, null, '  ');
        docpad.log('info', util.format(locale.databaseCacheWrite, databaseData.models.length));
        return safefs.writeFile(config.databaseCachePath, databaseDataDump, complete);
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.loadDocument = function(document, opts, next) {
      var ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      document.action('load contextualize', opts, next);
      return this;
    };

    DocPad.prototype.loadAndRenderDocument = function(document, opts, next) {
      var docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      docpad.loadDocument(document, opts, function(err) {
        if (err) {
          return next(err);
        }
        return docpad.renderDocument(document, opts, next);
      });
      return this;
    };

    DocPad.prototype.renderDocument = function(document, opts, next) {
      var clone, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      clone = document.clone().action('render', opts, function(err) {
        var result;
        result = clone.getOutContent();
        return next(err, result, document);
      });
      return this;
    };

    DocPad.prototype.renderPath = function(path, opts, next) {
      var attributes, document, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      attributes = extendr.extend({
        fullPath: path
      }, opts.attributes);
      document = this.createDocument(attributes);
      this.loadAndRenderDocument(document, opts, next);
      return this;
    };

    DocPad.prototype.renderData = function(content, opts, next) {
      var attributes, document, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      attributes = extendr.extend({
        filename: opts.filename,
        data: content
      }, opts.attributes);
      document = this.createDocument(attributes);
      this.loadAndRenderDocument(document, opts, next);
      return this;
    };

    DocPad.prototype.renderText = function(text, opts, next) {
      var attributes, clone, document, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      if (opts.actions == null) {
        opts.actions = ['renderExtensions', 'renderDocument'];
      }
      attributes = extendr.extend({
        filename: opts.filename,
        data: text,
        body: text,
        content: text
      }, opts.attributes);
      document = this.createDocument(attributes);
      clone = document.clone().action('normalize contextualize render', opts, function(err) {
        var result;
        result = clone.getOutContent();
        return next(err, result, document);
      });
      return this;
    };

    DocPad.prototype.render = function(opts, next) {
      var err, locale, path, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      locale = this.getLocale();
      if (opts.document) {
        this.renderDocument(opts.document, opts, next);
      } else if (opts.data) {
        this.renderData(opts.data, opts, next);
      } else if (opts.text) {
        this.renderText(opts.text, opts, next);
      } else {
        path = opts.path || opts.fullPath || opts.filename || null;
        if (path) {
          this.renderPath(path, opts, next);
        } else {
          err = new Error(locale.renderInvalidOptions);
          return next(err);
        }
      }
      return this;
    };

    DocPad.prototype.watchers = null;

    DocPad.prototype.destroyWatchers = function() {
      var docpad, i, len, ref2, watcher;
      docpad = this;
      if (docpad.watchers) {
        ref2 = docpad.watchers;
        for (i = 0, len = ref2.length; i < len; i++) {
          watcher = ref2[i];
          watcher.close();
        }
        docpad.watchers = [];
      }
      return this;
    };

    DocPad.prototype.watch = function(opts, next) {
      var changeHandler, config, database, docpad, locale, performGenerate, queueRegeneration, ref2, regenerateTimer, restartWatchers;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      locale = this.getLocale();
      database = this.getDatabase();
      if (this.watchers == null) {
        this.watchers = [];
      }
      restartWatchers = function(next) {
        var regeneratePaths, reloadPaths, srcPath, tasks;
        docpad.destroyWatchers();
        tasks = new docpad.TaskGroup("watch tasks", {
          concurrency: 0,
          next: next
        });
        reloadPaths = union(config.reloadPaths, config.configPaths);
        tasks.addTask("watch reload paths", function(complete) {
          return docpad.watchdir({
            paths: reloadPaths,
            listeners: {
              'log': docpad.log,
              'error': docpad.error,
              'change': function() {
                docpad.log('info', util.format(locale.watchReloadChange, new Date().toLocaleTimeString()));
                return docpad.action('load', function(err) {
                  if (err) {
                    return docpad.fatal(err);
                  }
                  return performGenerate({
                    reset: true
                  });
                });
              }
            },
            next: function(err, _watchers) {
              var i, len, watcher;
              if (err) {
                docpad.warn("Watching the reload paths has failed:\n" + docpad.inspector(reloadPaths), err);
                return complete();
              }
              for (i = 0, len = _watchers.length; i < len; i++) {
                watcher = _watchers[i];
                docpad.watchers.push(watcher);
              }
              return complete();
            }
          });
        });
        regeneratePaths = config.regeneratePaths;
        tasks.addTask("watch regenerate paths", function(complete) {
          return docpad.watchdir({
            paths: regeneratePaths,
            listeners: {
              'log': docpad.log,
              'error': docpad.error,
              'change': function() {
                return performGenerate({
                  reset: true
                });
              }
            },
            next: function(err, _watchers) {
              var i, len, watcher;
              if (err) {
                docpad.warn("Watching the regenerate paths has failed:\n" + docpad.inspector(regeneratePaths), err);
                return complete();
              }
              for (i = 0, len = _watchers.length; i < len; i++) {
                watcher = _watchers[i];
                docpad.watchers.push(watcher);
              }
              return complete();
            }
          });
        });
        srcPath = config.srcPath;
        tasks.addTask("watch the source path", function(complete) {
          return docpad.watchdir({
            path: srcPath,
            listeners: {
              'log': docpad.log,
              'error': docpad.error,
              'change': changeHandler
            },
            next: function(err, watcher) {
              if (err) {
                docpad.warn("Watching the src path has failed: " + srcPath, err);
                return complete();
              }
              docpad.watchers.push(watcher);
              return complete();
            }
          });
        });
        tasks.run();
        return this;
      };
      regenerateTimer = null;
      queueRegeneration = function() {
        if (regenerateTimer) {
          clearTimeout(regenerateTimer);
          regenerateTimer = null;
        }
        return regenerateTimer = setTimeout(performGenerate, config.regenerateDelay);
      };
      performGenerate = function(opts) {
        if (opts == null) {
          opts = {};
        }
        docpad.log(util.format(locale.watchRegenerating, new Date().toLocaleTimeString()));
        return docpad.action('generate', opts, function(err) {
          if (err) {
            docpad.error(err);
          }
          return docpad.log(util.format(locale.watchRegenerated, new Date().toLocaleTimeString()));
        });
      };
      changeHandler = function(changeType, filePath, fileCurrentStat, filePreviousStat) {
        var err, file, fileEitherStat, isDirectory, isIgnored;
        fileEitherStat = fileCurrentStat || filePreviousStat;
        if (!fileEitherStat) {
          err = new Error("DocPad has encountered an invalid state while detecting changes for your files.\nSo the DocPad team can fix this right away, please provide any information you can to:\nhttps://github.com/bevry/docpad/issues/792");
          return docpad.error(err);
        }
        docpad.log('info', util.format(locale.watchChange, new Date().toLocaleTimeString()), changeType, filePath);
        isIgnored = docpad.isIgnoredPath(filePath);
        if (isIgnored) {
          docpad.log('debug', util.format(locale.watchIgnoredChange, new Date().toLocaleTimeString()), filePath);
          return;
        }
        isDirectory = fileEitherStat.isDirectory();
        if (isDirectory) {
          docpad.log('debug', util.format(locale.watchDirectoryChange, new Date().toLocaleTimeString()), filePath);
          return;
        }
        if (fileCurrentStat != null) {
          fileCurrentStat.mtime = new Date();
        }
        file = docpad.addModel({
          fullPath: filePath,
          stat: fileCurrentStat
        });
        if (changeType === 'update') {
          file.setStat(fileCurrentStat);
        }
        if (changeType === 'delete') {
          database.remove(file);
          return file.action('delete', function(err) {
            if (err) {
              return docpad.error(err);
            }
            return queueRegeneration();
          });
        } else if (changeType === 'create' || changeType === 'update') {
          return file.action('load', function(err) {
            if (err) {
              return docpad.error(err);
            }
            return queueRegeneration();
          });
        }
      };
      docpad.log(locale.watchStart);
      restartWatchers(function(err) {
        if (err) {
          return next(err);
        }
        docpad.log(locale.watchStarted);
        return next();
      });
      return this;
    };

    DocPad.prototype.run = function(opts, next) {
      var config, docpad, locale, ref2, rootPath, run, srcPath;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      locale = this.getLocale();
      config = this.getConfig();
      srcPath = config.srcPath, rootPath = config.rootPath;
      run = function(complete) {
        return balUtil.flow({
          object: docpad,
          action: 'server generate watch',
          args: [opts],
          next: complete
        });
      };
      safefs.exists(srcPath, function(exists) {
        if (exists) {
          return run(next);
        }
        return safefs.readdir(rootPath, function(err, files) {
          if (err) {
            return next(err);
          }
          if (files.length) {
            docpad.warn(util.format(locale.skeletonNonexistant, rootPath));
            return next();
          } else {
            return docpad.skeleton(opts, function(err) {
              if (err) {
                return next(err);
              }
              if (opts.global === true || docpad.getConfig().global === true) {
                return run(next);
              }
              docpad.log('notice', locale.startLocal);
              return docpad.destroy(function(err) {
                if (err) {
                  return next(err);
                }
                return docpadUtil.startLocalDocPadExecutable(next);
              });
            });
          }
        });
      });
      return this;
    };

    DocPad.prototype.initInstall = function(opts, next) {
      var config, docpad, ref2, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      tasks = new this.TaskGroup("initInstall tasks", {
        concurrency: 0,
        next: next
      });
      tasks.addTask("node modules", function(complete) {
        var path;
        path = pathUtil.join(config.rootPath, 'node_modules');
        return safefs.ensurePath(path, complete);
      });
      tasks.addTask("package", function(complete) {
        var path;
        path = pathUtil.join(config.rootPath, 'package.json');
        return safefs.exists(path, function(exists) {
          var data;
          if (exists) {
            return complete();
          }
          data = JSON.stringify({
            name: 'no-skeleton.docpad',
            version: '0.1.0',
            description: 'New DocPad project without using a skeleton',
            dependencies: {
              docpad: '~' + docpad.getVersion()
            },
            main: 'node_modules/.bin/docpad-server',
            scripts: {
              start: 'node_modules/.bin/docpad-server'
            }
          }, null, '  ');
          return safefs.writeFile(path, data, complete);
        });
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.uninstall = function(opts, next) {
      var config, docpad, ref2, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      tasks = new this.TaskGroup("uninstall tasks", {
        next: next
      });
      if (opts.plugin) {
        tasks.addTask("uninstall the plugin: " + opts.plugin, function(complete) {
          var plugin, plugins;
          plugins = (function() {
            var i, len, ref3, results;
            ref3 = opts.plugin.split(/[,\s]+/);
            results = [];
            for (i = 0, len = ref3.length; i < len; i++) {
              plugin = ref3[i];
              if (plugin.indexOf('docpad-plugin-') !== 0) {
                plugin = "docpad-plugin-" + plugin;
              }
              results.push(plugin);
            }
            return results;
          })();
          return docpad.uninstallNodeModule(plugins, {
            stdio: 'inherit',
            next: complete
          });
        });
      }
      tasks.addTask("re-load configuration", function(complete) {
        return docpad.load(complete);
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.install = function(opts, next) {
      var config, docpad, ref2, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      tasks = new this.TaskGroup("install tasks", {
        next: next
      });
      tasks.addTask("init the installation", function(complete) {
        return docpad.initInstall(opts, complete);
      });
      if (opts.plugin) {
        tasks.addTask("install the plugin: " + opts.plugin, function(complete) {
          var plugin, plugins;
          plugins = (function() {
            var i, len, ref3, results;
            ref3 = opts.plugin.split(/[,\s]+/);
            results = [];
            for (i = 0, len = ref3.length; i < len; i++) {
              plugin = ref3[i];
              if (plugin.indexOf('docpad-plugin-') !== 0) {
                plugin = "docpad-plugin-" + plugin;
              }
              if (plugin.indexOf('@') === -1) {
                plugin += '@' + docpad.pluginVersion;
              }
              results.push(plugin);
            }
            return results;
          })();
          return docpad.installNodeModule(plugins, {
            stdio: 'inherit',
            next: complete
          });
        });
      }
      tasks.addTask("re-initialize the website's modules", function(complete) {
        return docpad.initNodeModules({
          stdio: 'inherit',
          next: complete
        });
      });
      tasks.addTask("fix node package versions", function(complete) {
        return docpad.fixNodePackageVersions(complete);
      });
      tasks.addTask("re-load the configuration", function(complete) {
        return docpad.load(complete);
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.upgrade = function(opts, next) {
      this.installNodeModule('npm docpad@6', {
        global: true,
        stdio: 'inherit',
        next: next
      });
      return this;
    };

    DocPad.prototype.update = function(opts, next) {
      var config, dependencies, devDependencies, docpad, ref2, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      tasks = new this.TaskGroup("update tasks", {
        next: next
      });
      tasks.addTask("init the install", function(complete) {
        return docpad.initInstall(opts, complete);
      });
      dependencies = [];
      eachr(docpad.websitePackageConfig.dependencies, function(version, name) {
        if (/^docpad-plugin-/.test(name) === false || /:\/\//.test(version) === true) {
          return;
        }
        return dependencies.push(name + '@' + docpad.pluginVersion);
      });
      if (dependencies.length !== 0) {
        tasks.addTask("update plugins that are dependencies", function(complete) {
          return docpad.installNodeModule('docpad@6 ' + dependencies, {
            stdio: 'inherit',
            next: complete
          });
        });
      }
      devDependencies = [];
      eachr(docpad.websitePackageConfig.devDependencies, function(version, name) {
        if (/^docpad-plugin-/.test(name) === false) {
          return;
        }
        return devDependencies.push(name + '@' + docpad.pluginVersion);
      });
      if (devDependencies.length !== 0) {
        tasks.addTask("update plugins that are dev dependencies", function(complete) {
          return docpad.installNodeModule(devDependencies, {
            save: '--save-dev',
            stdio: 'inherit',
            next: complete
          });
        });
      }
      tasks.addTask("fix node package versions", function(complete) {
        return docpad.fixNodePackageVersions(complete);
      });
      tasks.addTask("re-initialize the rest of the website's modules", function(complete) {
        return docpad.initNodeModules({
          stdio: 'inherit',
          next: complete
        });
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.clean = function(opts, next) {
      var config, docpad, locale, ref2, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = docpad.getConfig();
      locale = this.getLocale();
      docpad.log('info', locale.renderCleaning);
      tasks = new this.TaskGroup("clean tasks", {
        concurrency: 0
      }, {
        next: function(err) {
          if (err) {
            return next(err);
          }
          docpad.log('info', locale.renderCleaned);
          return next();
        }
      });
      tasks.addTask('reset the collecitons', function(complete) {
        return docpad.resetCollections(opts, complete);
      });
      tasks.addTask('delete out path', function(complete) {
        if (config.rootPath.indexOf(config.outPath) !== -1) {
          return complete();
        }
        return rimraf(config.outPath, complete);
      });
      tasks.addTask('delete database cache file', function(complete) {
        return safefs.unlink(config.databaseCachePath, complete);
      });
      tasks.run();
      return this;
    };

    DocPad.prototype.initSkeleton = function(skeletonModel, opts, next) {
      var config, docpad, ref2, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.getConfig();
      if (opts.destinationPath == null) {
        opts.destinationPath = config.rootPath;
      }
      tasks = new this.TaskGroup("initSkeleton tasks", {
        next: next
      });
      tasks.addTask("ensure the path we are writing to exists", function(complete) {
        return safefs.ensurePath(opts.destinationPath, complete);
      });
      if ((skeletonModel != null) && skeletonModel.id !== 'none') {
        tasks.addTask("clone out the git repo", function(complete) {
          return docpad.initGitRepo({
            path: opts.destinationPath,
            url: skeletonModel.get('repo'),
            branch: skeletonModel.get('branch'),
            remote: 'skeleton',
            stdio: 'inherit',
            next: complete
          });
        });
      } else {
        tasks.addTask("ensure src path exists", function(complete) {
          return safefs.ensurePath(config.srcPath, complete);
        });
        tasks.addGroup("initialize the website directory files", function() {
          this.setConfig({
            concurrency: 0
          });
          this.addTask("README.md", function(complete) {
            var path;
            path = pathUtil.join(config.rootPath, 'README.md');
            return safefs.exists(path, function(exists) {
              var data;
              if (exists) {
                return complete();
              }
              data = "# Your [DocPad](http://docpad.org) Project\n\n## License\nCopyright &copy; " + ((new Date()).getFullYear()) + "+ All rights reserved.";
              return safefs.writeFile(path, data, complete);
            });
          });
          this.addTask("docpad.coffee configuration file", function(complete) {
            return docpad.getConfigPath(function(err, path) {
              var data;
              if (err || path) {
                return complete(err);
              }
              path = pathUtil.join(config.rootPath, 'docpad.coffee');
              data = "# DocPad Configuration File\n# http://docpad.org/docs/config\n\n# Define the DocPad Configuration\ndocpadConfig = {\n	# ...\n}\n\n# Export the DocPad Configuration\nmodule.exports = docpadConfig";
              return safefs.writeFile(path, data, complete);
            });
          });
          this.addTask("documents directory", function(complete) {
            return safefs.ensurePath(config.documentsPaths[0], complete);
          });
          this.addTask("layouts directory", function(complete) {
            return safefs.ensurePath(config.layoutsPaths[0], complete);
          });
          return this.addTask("files directory", function(complete) {
            return safefs.ensurePath(config.filesPaths[0], complete);
          });
        });
      }
      tasks.run();
      return this;
    };

    DocPad.prototype.installSkeleton = function(skeletonModel, opts, next) {
      var docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      if (opts.destinationPath == null) {
        opts.destinationPath = this.getConfig().rootPath;
      }
      docpad.initSkeleton(skeletonModel, opts, function(err) {
        if (err) {
          return next(err);
        }
        return docpad.install(opts, next);
      });
      return this;
    };

    DocPad.prototype.useSkeleton = function(skeletonModel, opts, next) {
      var docpad, locale, ref2, skeletonId, skeletonName;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      locale = this.getLocale();
      if (opts.destinationPath == null) {
        opts.destinationPath = this.getConfig().rootPath;
      }
      skeletonId = (skeletonModel != null ? skeletonModel.id : void 0) || 'none';
      skeletonName = (skeletonModel != null ? skeletonModel.get('name') : void 0) || locale.skeletonNoneName;
      docpad.track('skeleton-use', {
        skeletonId: skeletonId
      });
      docpad.log('info', util.format(locale.skeletonInstall, skeletonName, opts.destinationPath) + ' ' + locale.pleaseWait);
      docpad.installSkeleton(skeletonModel, opts, function(err) {
        if (err) {
          return next(err);
        }
        docpad.log('info', locale.skeletonInstalled);
        return next(err);
      });
      return this;
    };

    DocPad.prototype.selectSkeleton = function(opts, next) {
      var docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      if (opts.selectSkeletonCallback == null) {
        opts.selectSkeletonCallback = null;
      }
      docpad.track('skeleton-ask');
      docpad.getSkeletons(function(err, skeletonsCollection) {
        if (err) {
          return next(err);
        }
        return opts.selectSkeletonCallback(skeletonsCollection, next);
      });
      return this;
    };

    DocPad.prototype.skeletonEmpty = function(path, next) {
      var locale;
      locale = this.getLocale();
      if (path == null) {
        path = this.getConfig().rootPath;
      }
      safefs.exists(pathUtil.join(path, 'package.json'), function(exists) {
        var err;
        if (exists) {
          err = new Error(locale.skeletonExists);
          return next(err);
        }
        return next();
      });
      return this;
    };

    DocPad.prototype.skeleton = function(opts, next) {
      var docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      if (opts.selectSkeletonCallback == null) {
        opts.selectSkeletonCallback = null;
      }
      this.skeletonEmpty(null, function(err) {
        if (err) {
          return next(err);
        }
        return docpad.selectSkeleton(opts, function(err, skeletonModel) {
          if (err) {
            return next(err);
          }
          return docpad.useSkeleton(skeletonModel, next);
        });
      });
      return this;
    };

    DocPad.prototype.init = function(opts, next) {
      var docpad, ref2;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      this.skeletonEmpty(null, function(err) {
        if (err) {
          return next(err);
        }
        return docpad.useSkeleton(null, next);
      });
      return this;
    };

    DocPad.prototype.serveDocument = function(opts, next) {
      var charset, collection, config, content, contentType, ctime, docpad, document, dynamic, encoding, err, etag, mtime, ref2, req, res, stat, templateData;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      document = opts.document, err = opts.err, req = opts.req, res = opts.res;
      docpad = this;
      config = this.getConfig();
      if (!document) {
        if (opts.statusCode != null) {
          return res.send(opts.statusCode);
        } else {
          return next();
        }
      }
      if (res.setHeaderIfMissing == null) {
        res.setHeaderIfMissing = function(name, value) {
          if (!res.getHeader(name)) {
            return res.setHeader(name, value);
          }
        };
      }
      encoding = document.get('encoding');
      if (encoding === 'utf8' || encoding === 'utf-8') {
        charset = 'utf-8';
      }
      contentType = document.get('outContentType') || document.get('contentType');
      res.setHeaderIfMissing('Content-Type', contentType + (charset ? "; charset=" + charset : ''));
      if (config.maxAge) {
        res.setHeaderIfMissing('Cache-Control', "public, max-age=" + config.maxAge);
      }
      dynamic = document.get('dynamic');
      if (dynamic) {
        collection = new FilesCollection([document], {
          name: 'dynamic collection'
        });
        templateData = extendr.extend({}, req.templateData || {}, {
          req: req,
          err: err
        });
        docpad.action('generate', {
          collection: collection,
          templateData: templateData
        }, function(err) {
          var content;
          content = document.getOutContent();
          if (err) {
            docpad.error(err);
            return next(err);
          } else {
            if (opts.statusCode != null) {
              return res.send(opts.statusCode, content);
            } else {
              return res.send(content);
            }
          }
        });
      } else {
        ctime = document.get('date');
        mtime = document.get('wtime');
        stat = document.getStat();
        if (mtime && stat) {
          etag = stat.size + '-' + Number(mtime);
        }
        if (etag) {
          res.setHeaderIfMissing('ETag', '"' + etag + '"');
        }
        if ((ctime != null ? ctime.toUTCString : void 0) != null) {
          res.setHeaderIfMissing('Date', ctime.toUTCString());
        }
        if ((mtime != null ? mtime.toUTCString : void 0) != null) {
          res.setHeaderIfMissing('Last-Modified', mtime.toUTCString());
        }
        if (etag && etag === (req.get('If-None-Match') || '').replace(/^"|"$/g, '')) {
          res.send(304);
        } else {
          content = document.getOutContent();
          if (content) {
            if (opts.statusCode != null) {
              res.send(opts.statusCode, content);
            } else {
              res.send(content);
            }
          } else {
            if (opts.statusCode != null) {
              res.send(opts.statusCode);
            } else {
              next();
            }
          }
        }
      }
      return this;
    };

    DocPad.prototype.serverMiddlewareHeader = function(req, res, next) {
      var docpad, tools;
      docpad = this;
      tools = res.get('X-Powered-By').split(/[,\s]+/g);
      tools.push("DocPad v" + (docpad.getVersion()));
      tools = tools.join(', ');
      res.set('X-Powered-By', tools);
      next();
      return this;
    };

    DocPad.prototype.serverMiddlewareRouter = function(req, res, next) {
      var docpad;
      docpad = this;
      docpad.getFileByRoute(req.url, function(err, file) {
        var cleanUrl, url;
        if (err || (file != null) === false) {
          return next(err);
        }
        url = file.get('url');
        cleanUrl = docpad.getUrlPathname(req.url);
        if ((url !== cleanUrl) && (url !== req.url)) {
          return res.redirect(301, url);
        }
        return docpad.serveDocument({
          document: file,
          req: req,
          res: res,
          next: next
        });
      });
      return this;
    };

    DocPad.prototype.serverMiddleware404 = function(req, res, next) {
      var database, docpad, document;
      docpad = this;
      database = docpad.getDatabaseSafe();
      docpad.log('notice', "404 Not Found:", req.url);
      if (!database) {
        return res.send(500);
      }
      document = database.findOne({
        relativeOutPath: '404.html'
      });
      docpad.serveDocument({
        document: document,
        req: req,
        res: res,
        next: next,
        statusCode: 404
      });
      return this;
    };

    DocPad.prototype.serverMiddleware500 = function(err, req, res, next) {
      var database, docpad, document;
      docpad = this;
      database = docpad.getDatabaseSafe();
      if (!database) {
        return res.send(500);
      }
      document = database.findOne({
        relativeOutPath: '500.html'
      });
      docpad.serveDocument({
        document: document,
        err: err,
        req: req,
        res: res,
        next: next,
        statusCode: 500
      });
      return this;
    };

    DocPad.prototype.server = function(opts, next) {
      var config, docpad, express, hostname, http, locale, port, ref2, ref3, ref4, ref5, servers, tasks;
      ref2 = extractOptsAndCallback(opts, next), opts = ref2[0], next = ref2[1];
      docpad = this;
      config = this.config;
      locale = this.getLocale();
      port = this.getPort();
      hostname = this.getHostname();
      http = require('http');
      express = require('express');
      servers = this.getServer(true);
      if (opts.serverExpress == null) {
        opts.serverExpress = servers.serverExpress;
      }
      if (opts.serverHttp == null) {
        opts.serverHttp = servers.serverHttp;
      }
      if (opts.middlewareBodyParser == null) {
        opts.middlewareBodyParser = (ref3 = config.middlewareBodyParser) != null ? ref3 : config.middlewareStandard;
      }
      if (opts.middlewareMethodOverride == null) {
        opts.middlewareMethodOverride = (ref4 = config.middlewareMethodOverride) != null ? ref4 : config.middlewareStandard;
      }
      if (opts.middlewareExpressRouter == null) {
        opts.middlewareExpressRouter = (ref5 = config.middlewareExpressRouter) != null ? ref5 : config.middlewareStandard;
      }
      if (opts.middleware404 == null) {
        opts.middleware404 = config.middleware404;
      }
      if (opts.middleware500 == null) {
        opts.middleware500 = config.middleware500;
      }
      tasks = new this.TaskGroup("server tasks", {
        next: next
      });
      tasks.addTask("emit serverBefore", function(complete) {
        return docpad.emitSerial('serverBefore', complete);
      });
      if (!opts.serverExpress || !opts.serverHttp) {
        tasks.addTask("create server", function() {
          opts.serverExpress || (opts.serverExpress = express());
          opts.serverHttp || (opts.serverHttp = http.createServer(opts.serverExpress));
          return docpad.setServer(opts);
        });
      }
      if (config.extendServer === true) {
        tasks.addTask("extend the server", function(complete) {
          if (opts.middlewareBodyParser !== false) {
            opts.serverExpress.use(express.urlencoded());
            opts.serverExpress.use(express.json());
          }
          if (opts.middlewareMethodOverride !== false) {
            if (typeChecker.isString(opts.middlewareMethodOverride)) {
              opts.serverExpress.use(require('method-override')(opts.middlewareMethodOverride));
            } else {
              opts.serverExpress.use(require('method-override')());
            }
          }
          return docpad.emitSerial('serverExtend', {
            server: opts.serverExpress,
            express: opts.serverExpress,
            serverHttp: opts.serverHttp,
            serverExpress: opts.serverExpress
          }, function(err) {
            if (err) {
              return next(err);
            }
            opts.serverExpress.use(docpad.serverMiddlewareHeader);
            if (opts.middlewareExpressRouter !== false) {
              opts.serverExpress.use(opts.serverExpress.router);
            }
            opts.serverExpress.use(docpad.serverMiddlewareRouter);
            if (config.maxAge) {
              opts.serverExpress.use(express["static"](config.outPath, {
                maxAge: config.maxAge
              }));
            } else {
              opts.serverExpress.use(express["static"](config.outPath));
            }
            if (opts.middleware404 !== false) {
              opts.serverExpress.use(docpad.serverMiddleware404);
            }
            if (opts.middleware500 !== false) {
              opts.serverExpress.use(docpad.serverMiddleware500);
            }
            return complete();
          });
        });
      }
      tasks.addTask("start the server", function(complete) {
        opts.serverHttp.once('error', function(err) {
          if (err.message.indexOf('EADDRINUSE') !== -1) {
            err = new Error(util.format(locale.serverInUse, port));
          }
          return complete(err);
        });
        docpad.log('debug', util.format(locale.serverStart, hostname, port, config.outPath));
        return opts.serverHttp.listen(port, hostname, function() {
          var address, serverHostname, serverLocation, serverPort;
          address = opts.serverHttp.address();
          serverHostname = address.address;
          serverPort = address.port;
          if (serverHostname === '0.0.0.0' || serverHostname === '::' || serverHostname === '::1') {
            serverHostname = '127.0.0.1';
          }
          serverLocation = "http://" + serverHostname + ":" + serverPort + "/";
          docpad.log('info', util.format(locale.serverStarted, serverLocation, config.outPath));
          return complete();
        });
      });
      tasks.addTask("emit serverAfter", function(complete) {
        return docpad.emitSerial('serverAfter', {
          server: opts.serverExpress,
          express: opts.serverExpress,
          serverHttp: opts.serverHttp,
          serverExpress: opts.serverExpress
        }, complete);
      });
      tasks.run();
      return this;
    };

    return DocPad;

  })(EventEmitterGrouped);

  module.exports = DocPad;

}).call(this);
