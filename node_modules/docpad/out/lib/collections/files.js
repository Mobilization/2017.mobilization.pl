// Generated by CoffeeScript 1.9.1
(function() {
  var FileModel, FilesCollection, Model, QueryCollection, pathUtil, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  pathUtil = require('path');

  ref = require('../base'), QueryCollection = ref.QueryCollection, Model = ref.Model;

  FileModel = require('../models/file');

  FilesCollection = (function(superClass) {
    extend(FilesCollection, superClass);

    function FilesCollection() {
      return FilesCollection.__super__.constructor.apply(this, arguments);
    }

    FilesCollection.prototype.model = FileModel;

    FilesCollection.prototype.collection = FilesCollection;

    FilesCollection.prototype.initialize = function(attrs, opts) {
      var base;
      if (opts == null) {
        opts = {};
      }
      if (this.options == null) {
        this.options = {};
      }
      if ((base = this.options).name == null) {
        base.name = opts.name || null;
      }
      return FilesCollection.__super__.initialize.apply(this, arguments);
    };

    FilesCollection.prototype.fuzzyFindOne = function(data, sorting, paging) {
      var escapedData, file, i, len, queries, query;
      escapedData = data != null ? data.replace(/[\/]/g, pathUtil.sep) : void 0;
      queries = [
        {
          relativePath: escapedData
        }, {
          relativeBase: escapedData
        }, {
          url: data
        }, {
          relativePath: {
            $startsWith: escapedData
          }
        }, {
          fullPath: {
            $startsWith: escapedData
          }
        }, {
          url: {
            $startsWith: data
          }
        }
      ];
      for (i = 0, len = queries.length; i < len; i++) {
        query = queries[i];
        file = this.findOne(query, sorting, paging);
        if (file) {
          return file;
        }
      }
      return null;
    };

    return FilesCollection;

  })(QueryCollection);

  module.exports = FilesCollection;

}).call(this);
