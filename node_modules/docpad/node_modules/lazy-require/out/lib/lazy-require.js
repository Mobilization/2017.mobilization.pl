// Generated by CoffeeScript 1.9.1
(function() {
  var complete, extractOptsAndCallback, fsUtil, lazyRequire, pathUtil, safeps;

  pathUtil = require('path');

  fsUtil = require('fs');

  safeps = require('safeps');

  extractOptsAndCallback = require('extract-opts');

  complete = function(error, result, next) {
    if (next) {
      next(error, result);
      return null;
    } else {
      return error || result;
    }
  };

  lazyRequire = module.exports = function(name, opts, next) {
    var ref;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    if (next) {
      return lazyRequire.async(name, opts, next);
    } else {
      return lazyRequire.sync(name, opts, next);
    }
  };

  lazyRequire.auto = function(name, opts, next) {
    var ref;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    if (!next || lazyRequire.canSyncInstall()) {
      return lazyRequire.requireOrInstallSync(name, opts, next);
    } else {
      return lazyRequire.requireOrInstallAsync(name, opts, next);
    }
  };

  lazyRequire.sync = function(name, opts, next) {
    var error, ref, result;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    result = lazyRequire.require(name, opts);
    if (result instanceof Error) {
      result = lazyRequire.installSync(name, opts);
      if (result instanceof Error) {
        error = result;
        result = null;
      }
    }
    return complete(error, result, next);
  };

  lazyRequire.async = function(name, opts, next) {
    var ref;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    lazyRequire.require(name, opts, function(err, result) {
      if (result) {
        return next(err, result);
      }
      return lazyRequire.installAsync(name, opts, next);
    });
    return null;
  };

  lazyRequire.require = function(name, opts, next) {
    var e1, e2, error, path, ref, result;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    try {
      result = require(name);
    } catch (_error) {
      e1 = _error;
      error = e1;
      if (opts.cwd) {
        path = pathUtil.join(opts.cwd, 'node_modules', name);
        try {
          result = require(path);
          error = null;
        } catch (_error) {
          e2 = _error;
          error = e2;
        }
      }
    }
    return complete(error, result, next);
  };

  lazyRequire.canSave = function(name, opts, next) {
    var err, error, ref, result;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    if (opts.cwd == null) {
      opts.cwd = process.cwd();
    }
    opts.packagePath = pathUtil.join(opts.cwd, 'package.json');
    try {
      result = fsUtil.existsSync(packagePath) === true;
    } catch (_error) {
      err = _error;
      error = err;
    }
    return complete(error, result, next);
  };

  lazyRequire.canSyncInstall = function(opts, next) {
    var error, ref, result;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    result = safeps.hasSpawnSync();
    if (result instanceof Error) {
      error = result;
      result = null;
    }
    return complete(error, result, next);
  };

  lazyRequire.installAsync = function(name, opts, next) {
    var args, error, ref;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    if (opts.save == null) {
      opts.save = false;
    }
    if (opts.cwd == null) {
      opts.cwd = process.cwd();
    }
    if (process.browser === true) {
      error = new Error("lazy-require: installing in the browser is not possible");
    } else if (opts.save === true && lazyRequire.canSave() === false) {
      error = new Error("lazy-require: cannot save the module as `opts.cwd` did not contain a `package.json` file");
    } else {
      args = ['npm', 'install', name];
      if (opts.save === true) {
        args.push('--save');
        delete opts.save;
      }
      safeps.spawn(args, opts, function(err) {
        if (err) {
          return next(err);
        }
        return lazyRequire.require(name, opts, next);
      });
      return null;
    }
    return complete(error, null, next);
  };

  lazyRequire.installSync = function(name, opts, next) {
    var args, error, ref, spawnResult;
    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];
    if (opts.save == null) {
      opts.save = false;
    }
    if (opts.cwd == null) {
      opts.cwd = process.cwd();
    }
    if (process.browser === true) {
      error = new Error("lazy-require: installing in the browser is not possible");
    } else if (lazyRequire.canSyncInstall() === false) {
      error = new Error("lazy-require: installing synchronously is not possible");
    } else if (opts.save === true && lazyRequire.canSave() === false) {
      error = new Error("lazy-require: cannot save the module as `opts.cwd` did not contain a `package.json` file");
    } else {
      args = ['npm', 'install', name];
      if (opts.save === true) {
        args.push('--save');
        delete opts.save;
      }
      spawnResult = safeps.spawnSync(args, opts);
      if (spawnResult instanceof Error) {
        error = spawnResult;
      } else {
        return lazyRequire.require(name, opts, next);
      }
    }
    return complete(error, null, next);
  };

}).call(this);
